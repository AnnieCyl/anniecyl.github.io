<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Android Bluetooth</title>
      <link href="/2021/01/27/Android-Bluetooth/"/>
      <url>/2021/01/27/Android-Bluetooth/</url>
      
        <content type="html"><![CDATA[<h1 id="Q1-连续两次-writeCharacteristic-却只有第一个的回调"><a href="#Q1-连续两次-writeCharacteristic-却只有第一个的回调" class="headerlink" title="Q1. 连续两次 writeCharacteristic 却只有第一个的回调"></a>Q1. 连续两次 writeCharacteristic 却只有第一个的回调</h1><p>在进行蓝牙数据读写时会设置一个状态表示正在忙碌，等待数据回调之后该状态会设置成空闲，只有空闲的时候，下一个蓝牙数据读写操作才可以进行。所以，当连续多次 writeCharacteristic 时，可能只回调了一次 onCharacteristicWrite，原因就在于上一次的 write 操作还没有回调，蓝牙处于 busy 状态，没有执行更多的蓝牙操作。</p><p>参考：<a href="http://a1anwang.com/post-18.html">http://a1anwang.com/post-18.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> bluetooth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dotfile</title>
      <link href="/2020/12/18/dotfile/"/>
      <url>/2020/12/18/dotfile/</url>
      
        <content type="html"><![CDATA[<h1 id="Dotfile"><a href="#Dotfile" class="headerlink" title="Dotfile"></a>Dotfile</h1><p>经常会遇到以点号开头的文件或者文件夹，比如 <code>.gitignore</code>，<code>.npmignore</code> ，这类文件叫做 **<em>dotfile</em>**。</p><p>如果这些文件已经建好了，修改时只要打开编辑即可。但是有时候是需要自己动手创建这些文件的。而在 Windows 中创建以点号开头的文件时，会提示“必须键入文件名”的错误。</p><p>因为 Windows 并没有以点号开头文件的习惯，实际上，这样的命名习惯来源于 Linux，Unix 等系统。在这些系统中，以点号开头的文件，也就是 dotfiles，默认是隐藏的，通常作为软件的配置文件名，或者一些临时文件，如文本编辑器的备份文件、历史文件的文件名。随着软件的跨平台，以及软件开发的跨平台，一些原本只见于类 Unix 系统的命名习惯也进入了 Windows，或者说在 Windows 下，有时也需要处理一些以 Unix，Linux 的命名习惯命名的文件。如 <code>.gitignore</code>, <code>.gitattributes</code> 是版本控制系统 git 中用到的配置文件，<code>.npmignore</code> 是 npm 包管理工具所用到的配置文件。</p><p>最简单的在 Windows 中创建 dotfile 的办法就是：在文件名后再加一个点来绕过这个限制。比如，创建 <code>.gitignore</code> 时，文件名输入 <code>.gitignore.</code> 并回车，创建好以后文件名末尾的多余的点会被自动移除。</p><p><a href="https://zzz.buzz/zh/2016/01/04/create-dotfiles-in-windows/">https://zzz.buzz/zh/2016/01/04/create-dotfiles-in-windows/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML</title>
      <link href="/2020/12/15/UML/"/>
      <url>/2020/12/15/UML/</url>
      
        <content type="html"><![CDATA[<h1 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h1><p>总是记不住 UML 那些图例呀，每次要画 UML 图了，就得再上网找一番，索性自己整理一下好了，方便以后查阅。</p><h2 id="访问修饰符表示"><a href="#访问修饰符表示" class="headerlink" title="访问修饰符表示"></a>访问修饰符表示</h2><p>成员变量以及方法前的访问修饰符用符号来表示：</p><ul><li><code>+</code> 表示 <code>public</code></li><li><code>-</code> 表示 <code>private</code></li><li><code>#</code> 表示 <code>protected</code></li></ul><h2 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h2><p>各种关系的强弱顺序：泛化 &#x3D; 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖</p><p><img src="/img/2020-12-15-uml/relation.png" alt="relation"></p><h3 id="泛化关系"><a href="#泛化关系" class="headerlink" title="泛化关系"></a>泛化关系</h3><p>泛化关系表现为<strong>继承非抽象类</strong>，也就是 <code>is-a</code> 的关系，e.g.：汽车在现实中有实现，可用汽车定义具体的对象；汽车与 SUV 之间为泛化关系，用一条带空心箭头的直线表示，如下图表示：SUV 继承自汽车，SUV 也是一种汽车。</p><div align=center><img src="/img/2020-12-15-uml/is-a.png" style="zoom:80%;"/></div>### 实现关系实现关系表现为**继承抽象类**，e.g.：“车”为一个抽象概念，无法直接用来定义对象，只有指明具体的子类（汽车还是自行车），才 可以用来定义对象。实现关系用一条带空心箭头的虚线表示。<div align=center><img src="/img/2020-12-15-uml/realize.png" style="zoom:80%;"/></div>### 聚合关系聚合关系表示整体由部分构成，也就是 `has-a` 的关系。在聚合关系中，成员对象是整体对象的一部分，但是成员对象可以脱离整体对象独立存在。例如一个汽车有 4 个轮子。聚合关系用一条带空心菱形箭头的直线表示。<div align=center><img src="/img/2020-12-15-uml/has-a.png" style="zoom:80%;"/></div>### 组合关系组合关系同样表示整体由部分构成，但组合关系是一种强依赖的关系，在组合关系中整体对象可以控制成员对象的生命周期，一旦整体对象不存在，成员对象也将不存在，成员对象与整体对象之间具有同生共死的关系。例如一个人有两只手。组合关系用一条带实心菱形的直线表示。<div align=center><img src="/img/2020-12-15-uml/composition.png" style="zoom:80%;"/></div>### 关联关系关联分单向关联和双向关联：* 如果一个类知道或者引用了另一个类，而另一个类不知道或者没有引用这个类，则这两个类是单向关联的。* 双向关联是两个类彼此都知道对方的存在。<p>关联关系默认不强调方向，使用普通直线，表示对象间相互知道；如果特别强调方向，可以用带箭头的直线。如下图，老师与学生是双向关联，老师有多名学生，学生也可能有多名老师。但学生与某课程间的关系为单向关联，一名学生可能要上多门课程，课程是个抽象的东西他不拥有学生。</p><div align=center><img src="/img/2020-12-15-uml/association.png" style="zoom:100%;"/></div>### 依赖关系与关联关系不同的是，依赖关系是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化，依赖关系也可能发生变化。依赖也有方向，双向依赖是一种非常糟糕的结构，应该总是保持单向依赖，杜绝双向依赖的产生。<p>在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系。依赖关系除了临时知道对方外，还“使用”对方的方法和属性。</p><p>依赖关系用带箭头的虚线表示，由依赖的一方指向被依赖的一方。例如程序员依赖电脑工作。</p><div align=center><img src="/img/2020-12-15-uml/dependency.png" style="zoom:80%;"/></div>]]></content>
      
      
      
        <tags>
            
            <tag> programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design Patterns</title>
      <link href="/2020/12/14/Design-Patterns/"/>
      <url>/2020/12/14/Design-Patterns/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式学习笔记"><a href="#设计模式学习笔记" class="headerlink" title="设计模式学习笔记"></a>设计模式学习笔记</h1><p>面向对象六大设计原则：</p><ul><li>单一职责原则（Single Responsibility Principle，简称SRP）</li><li>开闭原则（Open Close Principle，简称OCP）：对扩展开放，对修改关闭。</li><li>接口隔离原则（InterfaceSegregation Principles，简称ISP）：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。</li><li>里氏替换原则（Liskov Substitution Principle，简称LSP）：所有引用基类的地方必须能透明地使用其子类的对象。也就是，只要父类能出现的地方，子类就可以出现，而且替换为子类也不会产生任何错误或异常，使用者可能根本就不需要知道是父类还是子类。</li><li>依赖倒置原则（Dependence Inversion Principle，简称DIP）：模块间通过接口依赖，实现类之间不发生直接的依赖关系。面向接口编程，或者说是面向抽象编程，这里的抽象指的是接口或者抽象类。</li><li>迪米特原则（Law of Demeter，简称LOD）也称为最少知识原则（Least Knowledge Principle）：一个对象应该对其他对象有最少的了解，也就是关于如何松耦合，一个类应该对自己需要耦合或调用的类知道得最少。</li></ul><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="1-工厂方法（Factory-Method）"><a href="#1-工厂方法（Factory-Method）" class="headerlink" title="1. 工厂方法（Factory Method）"></a>1. 工厂方法（Factory Method）</h3><p>简单工厂方法：一个工厂类根据不同的参数创建不同的产品实例对象返回。当有新产品类时，需要修改工厂类中生成实例对象的方法，将这个新产品的判断添加进去来创建新产品的实例对象返回。所以简单工厂方法不符合<code>开放-封闭原则</code>。</p><p><img src="/img/2020-12-14-design-patterns/simple-factory.png" alt="simple-factory"></p><p>工厂方法：一个抽象工厂类，有不同的具体工厂类继承实现。每个具体工厂类创建返回不同的具体产品对象。当有新产品需要添加的时候，只要添加对应的工厂类和新产品类即可，不用去修改已有的工厂类和产品类。所以工厂方法模式符合<code>开放-封闭原则</code>。</p><p><img src="/img/2020-12-14-design-patterns/factory-method.png" alt="factory-method"></p><p><a href="https://www.hollischuang.com/archives/3709">https://www.hollischuang.com/archives/3709</a></p><h3 id="2-抽象工厂（Abstract-Factory）"><a href="#2-抽象工厂（Abstract-Factory）" class="headerlink" title="2. 抽象工厂（Abstract Factory）"></a>2. 抽象工厂（Abstract Factory）</h3><p>与工厂方法不同的是，抽象工厂针对的是生产一组相关的产品, 即一个产品族。</p><ul><li><p>产品等级结构：产品等级结构即产品的继承结构，如一个抽象类是电视机，取子类有海尔电视机、长虹电视机，则抽象电视机与具体品牌的电视机之间构成了一个产品等级结构。</p></li><li><p>产品族：在抽象工厂模式中，产品族是指同一个工厂生产的，位于不同产品等级结构中的一组产品，如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中。</p></li></ul><p><img src="/img/2020-12-14-design-patterns/abstract-factory.png" alt="abstract-factory"></p><h3 id="3-生成器（Builder-Pattern）"><a href="#3-生成器（Builder-Pattern）" class="headerlink" title="3. 生成器（Builder Pattern）"></a>3. 生成器（Builder Pattern）</h3><p>也称为建造者模式，将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。简单来说就是，相同的过程可以创建不同的产品。</p><p><img src="/img/2020-12-14-design-patterns/builder.png" alt="builder"></p><p><a href="https://refactoringguru.cn/design-patterns/builder">https://refactoringguru.cn/design-patterns/builder</a></p><p>使用场景：当一个类的构造函数参数个数超过4个，而且这些参数有些是可选的参数，考虑使用构造者模式。在 Android 中应用十分广泛，比如 AlerDialog：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(<span class="built_in">this</span>).setTitle(<span class="string">&quot;这是标题&quot;</span>)</span><br><span class="line">        .setMessage(<span class="string">&quot;这是 Message&quot;</span>)</span><br><span class="line">        .setPositiveButton(<span class="string">&quot;确定&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .setNegativeButton(<span class="string">&quot;取消&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .create()</span><br><span class="line">        .show();</span><br></pre></td></tr></table></figure><h3 id="4-原型（Prototype-Pattern）"><a href="#4-原型（Prototype-Pattern）" class="headerlink" title="4. 原型（Prototype Pattern）"></a>4. 原型（Prototype Pattern）</h3><p>原型模式是一种对象创建型模式，不是利用类来生成实例，而是通过实例来生成实例。换句话说原型模式就是通过复制现有实例来创建新的实例，无须知道相应类的信息。</p><p>使用原型模式创建对象比直接 new 一个对象更有效，因为它是直接对内存进行拷贝，数据对象的内容就全部都有了，不需要重新创建内存区域重新实例化赋值这些操作了，这样的话速度能够快很多。在一些重复创建对象的场景下，就可以使用原型模式来提高对象的创建性能。例如：循环体内创建对象时，就可以考虑用 <code>clone()</code> 的方式来实现。</p><p>原型模式的克隆分为浅克隆和深克隆。</p><ul><li>浅克隆：创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，仍指向原有属性所指向的对象的内存地址。</li><li>深克隆：创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。</li></ul><p><img src="/img/2020-12-14-design-patterns/prototype.png" alt="prototype"></p><h3 id="5-单例（Singleton-Pattern）"><a href="#5-单例（Singleton-Pattern）" class="headerlink" title="5. 单例（Singleton Pattern）"></a>5. 单例（Singleton Pattern）</h3><p>单例模式能够保证一个类只有一个实例，并提供一个访问该实例的全局节点。</p><p>所有单例的实现都包含以下两个相同的步骤：</p><ul><li>将默认构造函数设为私有， 防止其他对象使用单例类的 new 运算符。</li><li>新建一个静态构建方法作为构造函数。 该函数会 “偷偷” 调用私有构造函数来创建对象， 并将其保存在一个静态成员变量中。 此后所有对于该函数的调用都将返回这一缓存对象。</li></ul><p><img src="/img/2020-12-14-design-patterns/singleton.png" alt="singleton"></p><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><h3 id="1-适配器（Adapter-Pattern）"><a href="#1-适配器（Adapter-Pattern）" class="headerlink" title="1. 适配器（Adapter Pattern）"></a>1. 适配器（Adapter Pattern）</h3><p>把一个类的接口变换成客户端所期待的另一种接口，从而使原本因为接口不匹配而无法一起工作的两个类能够在一起工作。</p><p>适配器模式的形式分为：</p><ul><li><p>类的适配器模式</p><p><img src="/img/2020-12-14-design-patterns/adapter-class.png" alt="adapter-class"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adaptee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">specificRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;specificRequest&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adapter</span> <span class="keyword">extends</span> <span class="title class_">Adaptee</span> <span class="keyword">implements</span> <span class="title class_">Target</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        specificRequest();</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Other operations</span></span><br><span class="line">        ... ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对象的适配器模式</p><p><img src="/img/2020-12-14-design-patterns/adapter-object.png" alt="adapter-object"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adaptee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">specificRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;specificRequest&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adapter</span> <span class="keyword">implements</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Adaptee adaptee;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Adapter</span><span class="params">(Adaptee adaptee)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adaptee = adaptee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        adaptee.specificRequest();</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Other operations</span></span><br><span class="line">        ... ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>一般情况下尽可能多的使用对象适配器模式，因为其实现了解耦合。</p><h3 id="2-桥接（Bridge-Pattern）"><a href="#2-桥接（Bridge-Pattern）" class="headerlink" title="2. 桥接（Bridge Pattern）"></a>2. 桥接（Bridge Pattern）</h3><p>如果软件系统中某个类存在两个独立变化的维度，通过桥接模式可以将这两个维度分离出来，使两者可以独立扩展，让系统更加符合“单一职责原则”。比如手机可以从两个维度进行变化，一个是品牌，一个是内存。此时我们就可以通过桥接模式将这两个维度分离开来，每一个维度都可以独立扩展。比如说手机品牌，可以又出现了苹果、三星、锤子等等。内存方面又可以生产 10G、16G 的了。</p><p>桥接模式有以下几种角色：</p><ul><li><p>（抽象部分）抽象角色（Abstraction）：抽象的定义，并保存一个 Implementor 对象的引用。</p></li><li><p>（抽象部分）扩展抽象角色（RefinedAbstraction）： 拓展 Abstraction。</p></li><li><p>（实现部分）抽象实现角色（Implementor）： 定义实现类的接口，提供基本操作，其实现交给子类实现。</p></li><li><p>（实现部分）具体实现角色（ConcreteImplementor）： 实现 Implementor 接口，在程序运行时，子类对象将替换其父类对象，提供给 Abstraction 具体的业务操作方法。</p></li></ul><p><img src="/img/2020-12-14-design-patterns/bridge.png" alt="bridge"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象角色（Abstraction）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Abstraction</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Implementor implementor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>&#123;</span><br><span class="line">        implementor.request();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Implementor <span class="title function_">getImplementor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> implementor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImplementor</span><span class="params">(Implementor implementor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.implementor = implementor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展抽象角色（RefinedAbstraction）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title class_">Abstraction</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.operation();</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Other operations</span></span><br><span class="line">        ... ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象实现角色（Implementor）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Implementor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体实现角色 A</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreateImplementorA</span> <span class="keyword">implements</span> <span class="title class_">Implementor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is concreteImplementorA&#x27;s request...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体实现角色 B</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreateImplementorB</span> <span class="keyword">implements</span> <span class="title class_">Implementor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is concreteImplementorB&#x27;s request...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 桥接模式测试代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BridgeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Abstraction</span> <span class="variable">abstraction</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RefinedAbstraction</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用第一个实现类</span></span><br><span class="line">        abstraction.setImplementor(<span class="keyword">new</span> <span class="title class_">ConcreateImplementorA</span>());</span><br><span class="line">        abstraction.operation();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用第二个实现类</span></span><br><span class="line">        abstraction.setImplementor(<span class="keyword">new</span> <span class="title class_">ConcreateImplementorB</span>());</span><br><span class="line">        abstraction.operation();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-组合（Composite-Pattern）"><a href="#3-组合（Composite-Pattern）" class="headerlink" title="3. 组合（Composite Pattern）"></a>3. 组合（Composite Pattern）</h3><p>组合多个对象形成<strong>树形</strong>结构以表示具有 “整体—部分” 关系的层次结构。组合模式对单个对象（即叶子对象）和组合对象（即容器对象）的使用具有一致性。包含以下角色：</p><ul><li><p>抽象构件（Component）：它可以是接口或抽象类，为叶子构件和容器构件对象声明接口，在该角色中可以包含所有子类共有行为的声明和实现。在抽象构件中定义了访问及管理它的子构件的方法，如增加子构件、删除子构件、获取子构件等。</p></li><li><p>叶子构件（Leaf）：它在组合结构中表示叶子节点对象，叶子节点没有子节点，它实现了在抽象构件中定义的行为。对于那些访问及管理子构件的方法，可以通过异常等方式进行处理。</p></li><li><p>容器构件（Composite）：它在组合结构中表示容器节点对象，容器节点包含子节点，其子节点可以是叶子节点，也可以是容器节点，它提供一个集合用于存储子节点，实现了在抽象构件中定义的行为，包括那些访问及管理子构件的方法，在其业务方法中可以递归调用其子节点的业务方法。</p></li></ul><p>组合模式分为透明式的组合模式和安全式的组合模式。</p><ul><li><p>透明方式：在该方式中，由于抽象构件声明了所有子类中的全部方法，所以客户端无须区别叶子对象和容器对象，对客户端来说是透明的。但其缺点是：叶子构件本来没有 <code>add()</code>、<code>remove()</code> 及 <code>getChild()</code> 方法，却要实现它们（空实现或抛异常），这样会带来一些安全性问题。</p><p><img src="/img/2020-12-14-design-patterns/composite-expose-all-methods.png" alt="composite-expose-all-methods"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象构件</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Component c)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Component c)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Component <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//叶子构件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Leaf</span> <span class="keyword">implements</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Leaf</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Component c)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Component c)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Component <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;树叶&quot;</span> + name + <span class="string">&quot;：被访问！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//容器构件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Composite</span> <span class="keyword">implements</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Component&gt; children = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Component&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Component c)</span> &#123;</span><br><span class="line">        children.add(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Component c)</span> &#123;</span><br><span class="line">        children.remove(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Component <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> children.get(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object obj : children) &#123;</span><br><span class="line">            ((Component) obj).operation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合模式测试代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompositePatternTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Component</span> <span class="variable">c0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Composite</span>();</span><br><span class="line">        <span class="type">Component</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Composite</span>();</span><br><span class="line">        <span class="type">Component</span> <span class="variable">leaf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Leaf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="type">Component</span> <span class="variable">leaf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Leaf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="type">Component</span> <span class="variable">leaf3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Leaf</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        c0.add(leaf1);</span><br><span class="line">        c0.add(c1);</span><br><span class="line">        c1.add(leaf2);</span><br><span class="line">        c1.add(leaf3);</span><br><span class="line">        c0.operation();</span><br><span class="line">        c1.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>安全方式：在该方式中，将管理子构件的方法移到容器构件中，抽象构件和叶子构件没有对子对象的管理方法，这样就避免了上一种方式的安全性问题，但由于叶子和容器构件有不同的接口，客户端在调用时要知道树叶对象和树枝对象的存在，所以失去了透明性。</p><p><img src="/img/2020-12-14-design-patterns/composite-expose-leaf-methods.png" alt="composite-expose-leaf-methods"></p></li></ul><h3 id="4-装饰器（Decorator-Pattern）"><a href="#4-装饰器（Decorator-Pattern）" class="headerlink" title="4. 装饰器（Decorator Pattern）"></a>4. 装饰器（Decorator Pattern）</h3><p>动态地给一个对象添加一些额外的职责，就增加功能来说，装饰器模式比生成子类更为灵活；它允许向一个现有的对象添加新的功能，同时又不改变其结构，相当于对现有的对象进行了一个包装。</p><p>Decorator 模式的目的就是把一个一个的附加功能，用 Decorator 的方式给一层一层地累加到原始数据源上，最终，通过组合获得我们想要的功能。例如给 <code>FileInputStream</code> 增加缓冲和解压缩功能，用 Decorator 模式写出来如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建原始的数据源:</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.gz&quot;</span>);</span><br><span class="line"><span class="comment">// 增加缓冲功能:</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line"><span class="comment">// 增加解压缩功能:</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">gis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GZIPInputStream</span>(bis);</span><br></pre></td></tr></table></figure><p>装饰器模式组成：</p><ul><li><p>抽象构件角色（Component）： 定义可以动态添加任务的对象的接口</p></li><li><p>具体构件角色（ConcreteComponent）：定义一个要被装饰器装饰的对象，即 Component 的具体实现</p></li><li><p>抽象装饰器（Decorator）：持有一个构件（Component）对象的实例，并定义一个与抽象构件接口一致的接口。</p></li><li><p>具体装饰器角色（ConcreteDecorator）：向构件对象添加新的职责</p><p><img src="/img/2020-12-14-design-patterns/decorator.png" alt="decorator"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象构件角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体构件角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteComponent</span> <span class="keyword">implements</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;装饰器模式。。。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰器角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Decorator</span> <span class="keyword">implements</span> <span class="title class_">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Component component;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Decorator</span><span class="params">(Component component)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.component = component;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        component.toDoSth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体装饰角色 A</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteDecoratorA</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteDecoratorA</span><span class="params">(Component component)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">super</span>.operation();</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">this</span>.newFunA();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">newFunA</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新功能A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.design.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体装饰角色 B</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteDecoratorB</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteDecoratorB</span><span class="params">(Component component)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">super</span>.operation();</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">this</span>.newFunB();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">newFunB</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新功能B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.design.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰模式测试代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDecorator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Component</span> <span class="variable">component</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteComponent</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="type">Component</span> <span class="variable">component1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteDecoratorA</span>(component);</span><br><span class="line">        component1.operation();</span><br><span class="line">        </span><br><span class="line">        <span class="type">Component</span> <span class="variable">component2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteDecoratorB</span>(component1);</span><br><span class="line">        component2.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装饰模式通常在以下几种情况使用。</p><ul><li>当需要给一个现有类添加附加职责，而又不能采用生成子类的方法进行扩充时。例如，该类被隐藏或者该类是终极类或者采用继承方式会产生大量的子类。</li><li>当需要通过对现有的一组基本功能进行排列组合而产生非常多的功能时，采用继承关系很难实现，而采用装饰模式却很好实现。</li><li>当对象的功能要求可以动态地添加，也可以再动态地撤销时。</li></ul><h3 id="5-外观（Facade-Pattern）"><a href="#5-外观（Facade-Pattern）" class="headerlink" title="5. 外观（Facade Pattern）"></a>5. 外观（Facade Pattern）</h3><p>外观模式又称为门面模式，为子系统中的一组接口提供一个统一的入口。外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。如办房产证或注册一家公司，要同多个部门联系，这时要是有一个综合部门能解决一切手续问题就好了。</p><p>外观模式包含如下两个角色：</p><ul><li><p>外观角色（Facade）：客户端可以调用它的方法，外观角色可以知道相关的（一个或者多个）子系统的功能和责任。正常情况下，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理。</p></li><li><p>子系统角色（SubSystem）：在软件系统中可以有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能。每一个子系统都可以被客户端直接调用，或者被外观角色调用，它处理由外观类传过来的请求；子系统并不知道外观的存在，对于子系统而言，外观角色仅仅是另外一个客户端而已。</p></li></ul><p><img src="/img/2020-12-14-design-patterns/facade.png" alt="facade"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//外观角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Facade</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SubSystem1</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubSystem1</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SubSystem2</span> <span class="variable">obj2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubSystem2</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SubSystem3</span> <span class="variable">obj3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubSystem3</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        obj1.method1();</span><br><span class="line">        obj2.method2();</span><br><span class="line">        obj3.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子系统角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubSystem1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子系统 1 的 method1() 被调用！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子系统角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubSystem2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子系统 2 的 method2() 被调用！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子系统角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubSystem3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子系统 3 的 method3() 被调用！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外观模式测试代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FacadePatternTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Facade</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Facade</span>();</span><br><span class="line">        f.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-享元（Flyweight-Pattern）"><a href="#6-享元（Flyweight-Pattern）" class="headerlink" title="6. 享元（Flyweight Pattern）"></a>6. 享元（Flyweight Pattern）</h3><p>“享”是共享的意思，“元”指的是元件，也就是小颗粒的东西，”享元”顾名思义便是共享小部件。享元模式以共享的方式高效地支持大量细粒度对象的重用，在享元模式中，存储这些共享实例对象的地方称为享元池（Flyweight Pool）。</p><p>在享元模式结构图中包含如下几个角色：</p><ul><li>抽象享元类（Flyweight）：通常是一个接口或抽象类，在抽象享元类中声明了具体享元类公共的方法，这些方法可以向外界提供享元对象的内部数据（内部状态），同时也可以通过这些方法来设置外部数据（外部状态）。</li><li>具体享元类（ConcreteFlyweight）：它实现了抽象享元类，其实例称为享元对象。在具体享元类中为内部状态提供了存储空间。通常我们可以结合单例模式来设计具体享元类，为每一个具体享元类提供唯一的享元对象。</li><li>非共享具体享元类（UnsharedConcreteFlyweight）：并不是所有的抽象享元类的子类都需要被共享，不能被共享的子类可设计为非共享具体享元类。当需要一个非共享具体享元类的对象时可以直接通过实例化创建。</li><li>享元工厂类（FlyweightFactory）：享元工厂类用于创建并管理享元对象，它针对抽象享元类编程，将各种类型的具体享元对象存储在一个享元池中，享元池一般设计为一个存储“键值对”的集合（也可以是其他类型的集合），可以结合工厂模式进行设计。当用户请求一个具体享元对象时，享元工厂提供一个存储在享元池中已创建的实例或者创建一个新的实例（如果不存在的话），返回新创建的实例并将其存储在享元池中。</li></ul><p><img src="/img/2020-12-14-design-patterns/flyweight.png" alt="flyweight"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象享元类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Flyweight</span> &#123;</span><br><span class="line">    String <span class="title function_">getInnerState</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">(String  externalState)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体享元类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteFlyweight</span> <span class="keyword">implements</span> <span class="title class_">Flyweight</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String innerState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteFlyweight</span><span class="params">(String innerState)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.innerState = innerState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInnerState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> innerState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">(String externalState)</span> &#123;</span><br><span class="line">        System.out.println(externalState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 享元工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlyweightFactory</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个 HashMap 用于存储享元对象，实现享元池</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Flyweight&gt; FLYWEIGHTS = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">FlyweightFactory</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FlyweightFactory</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">FlyweightFactory</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> FlyweightFactory <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Flyweight <span class="title function_">getFlyweight</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="comment">// 如果对象存在，则直接从享元池获取</span></span><br><span class="line">        <span class="keyword">if</span> (FLYWEIGHTS.containsKey(key))&#123;</span><br><span class="line">            <span class="keyword">return</span> FLYWEIGHTS.get(key);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果对象不存在，先创建一个新的对象添加到享元池中，然后返回</span></span><br><span class="line">            <span class="type">Flyweight</span> <span class="variable">flyweight</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteFlyweight</span>(<span class="string">&quot;innerState&quot;</span>);</span><br><span class="line">            FLYWEIGHTS.put(key, flyweight);</span><br><span class="line">            <span class="keyword">return</span> flyweight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-代理（Proxy-Pattern）"><a href="#7-代理（Proxy-Pattern）" class="headerlink" title="7. 代理（Proxy Pattern）"></a>7. 代理（Proxy Pattern）</h3><p>代理模式的目标是控制对被代理对象的访问，而装饰模式是给原对象增加额外功能。</p><h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><h3 id="1-责任链"><a href="#1-责任链" class="headerlink" title="1. 责任链"></a>1. 责任链</h3><h3 id="2-命令"><a href="#2-命令" class="headerlink" title="2. 命令"></a>2. 命令</h3><h3 id="3-解释器"><a href="#3-解释器" class="headerlink" title="3. 解释器"></a>3. 解释器</h3><h3 id="4-迭代器"><a href="#4-迭代器" class="headerlink" title="4. 迭代器"></a>4. 迭代器</h3><h3 id="5-中介"><a href="#5-中介" class="headerlink" title="5. 中介"></a>5. 中介</h3><h3 id="6-备忘录"><a href="#6-备忘录" class="headerlink" title="6. 备忘录"></a>6. 备忘录</h3><h3 id="7-观察者"><a href="#7-观察者" class="headerlink" title="7. 观察者"></a>7. 观察者</h3><h3 id="8-状态"><a href="#8-状态" class="headerlink" title="8. 状态"></a>8. 状态</h3><h3 id="9-策略"><a href="#9-策略" class="headerlink" title="9. 策略"></a>9. 策略</h3><h3 id="10-模板方法"><a href="#10-模板方法" class="headerlink" title="10. 模板方法"></a>10. 模板方法</h3><h3 id="11-访问者"><a href="#11-访问者" class="headerlink" title="11. 访问者"></a>11. 访问者</h3>]]></content>
      
      
      
        <tags>
            
            <tag> programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin Study</title>
      <link href="/2020/10/18/Kotlin-Study/"/>
      <url>/2020/10/18/Kotlin-Study/</url>
      
        <content type="html"><![CDATA[<p>语法糖表达式和实际调用函数对照表</p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Q&amp;A</title>
      <link href="/2019/07/16/git-q-a/"/>
      <url>/2019/07/16/git-q-a/</url>
      
        <content type="html"><![CDATA[<h1 id="误输密码后一直认证失败"><a href="#误输密码后一直认证失败" class="headerlink" title="误输密码后一直认证失败"></a>误输密码后一直认证失败</h1><p>当 SmartGit 弹出用户名密码时，输错了密码以后不会再弹出用户名密码框而一直认证失败。这时候只要到 <code>控制面板 -&gt; 用户账户 -&gt; 凭据管理器 -&gt; Windows 凭据</code> 里找到需要修正密码的 git 服务器，编辑修改成正确的密码即可。</p><h1 id="在-smartgit-同步-github-工程时一直弹框要求输入用户名和密码"><a href="#在-smartgit-同步-github-工程时一直弹框要求输入用户名和密码" class="headerlink" title="在 smartgit 同步 github 工程时一直弹框要求输入用户名和密码"></a>在 smartgit 同步 github 工程时一直弹框要求输入用户名和密码</h1><ol><li>前提是有生成 ssh 密钥对了（生成密钥对的时候不要设置密码，当然如果要设置密码的话，就要记住这个密码，后续认证或者同步的时候可能需要输这个密码），然后私钥放在本地电脑的 <code>C:\Users\Administrator\.ssh</code> 下，公钥添加到 github 上。</li><li>将工程地址改成 git 开头的，不要用 HTTPS 开头的地址，这样的话 smartgit 就会使用 ssh 密钥对来同步 github 上的工程。两种方式：</li></ol><ul><li>第一种方式：在 smartgit 中右击远程分支，选择 <code>Preferences</code>，将地址改成 git 开头的<br><img src="/img/2019-07-16-git-q-a/origin-properties.png" alt="lfs-file"><br>这个时候 smartgit 可能会要求选择私钥文件，如果生成 ssh 密钥的时候有设置密码，就要设置密码。如果明明已经输对了密码，切换地址还是失败了，那就在 smartgit 的 <code>Edit -&gt; Preferences -&gt; Commands -&gt; Authentication</code> 里面选择 <code>User system SSH client</code>。</li><li>第二种方式：使用命令行操作<ul><li>查看当前方式： <code>git remote -v</code></li><li>先移除旧的 http 的 origin：<code>git remote rm origin</code></li><li>再添加新的 ssh 方式的 origin：<code>git remote add origin git@github.com:xxx/xxx.git</code></li><li>可以再用 <code>git remote -v</code> 检查一下是否改变成功。</li><li>改完之后其实还不能同步工程，因为新的远程分支还没有绑定本地分支，可以使用 <code>git push --set-upstream origin master</code> 绑定，也可以在 smartgit 中操作。</li></ul></li></ul><h1 id="Failed-to-connect-to-github-com-port-443"><a href="#Failed-to-connect-to-github-com-port-443" class="headerlink" title="Failed to connect to github.com port 443"></a>Failed to connect to github.com port 443</h1><p>开启了 VPN，网页可以打开 github，但是使用命令行从 github 上 clone 工程的时候就一直提示<code>Failed to connect to github.com port 443: Timed </code>。可能是命令行在 clone 的时候并没有使用 vpn 进行代理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 先取消代理配置</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br><span class="line"></span><br><span class="line">// 查看自己的 VPN 端口号以后再配置</span><br><span class="line">git config --global http.proxy 127.0.0.1:7890</span><br><span class="line">git config --global https.proxy 127.0.0.1:7890</span><br></pre></td></tr></table></figure><p><img src="/img/2019-07-16-git-q-a/proxy-port.png" alt="proxy-port"></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git LFS</title>
      <link href="/2019/06/21/Git-LFS/"/>
      <url>/2019/06/21/Git-LFS/</url>
      
        <content type="html"><![CDATA[<p>官网：<a href="https://docs.gitlab.com/ee/workflow/lfs/lfs_administration.html">https://docs.gitlab.com/ee/workflow/lfs/lfs_administration.html</a></p><p>首先需要服务端配置支持 LFS（Large File Storage）。</p><p>对于客户端：</p><ul><li>下载安装：<a href="https://git-lfs.github.com/">https://git-lfs.github.com/</a></li><li>定位到要支持 LFS 的工程目录下，执行 <code>git lfs install</code> 开启 LFS 功能</li><li>执行 <code>git lfs track</code> 命令进行大文件追踪，例如 <code>git lfs track &quot;*.png&quot;</code> 追踪所有后缀为 png 的文件，git 会自动生成 <code>.gitattributes</code> 文件并将 <code>*.png</code> 添加到 <code>.gitattributes</code> 文件中。</li><li>执行 <code>git lfs track</code> 可以查看当前追踪哪些类型的文件，即添加到 <code>.gitattributes</code> 文件中的文件类型。</li><li>将 <code>.gitattributes</code> 文件提交至仓库。</li><li>执行 <code>git lfs ls-files</code> 可以显示当前跟踪的文件列表。</li><li>将文件提交到仓库以后，LFS 跟踪的文件在 gitlab 页面上会以『LFS』的形式显示，如下。<br><img src="/img/2019-06-21-git-lfs/lfs-file.png" alt="lfs-file"></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DUKPT</title>
      <link href="/2019/02/20/DUKPT/"/>
      <url>/2019/02/20/DUKPT/</url>
      
        <content type="html"><![CDATA[<h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><ul><li>DUKPT：Derived Unique Key Per Transaction</li><li>BDK：Base Derivation Key，DUKPT 密钥体系的根密钥</li><li>IKSN：Initial Key Serial Number</li><li>KSN：Key Serial Number，由 IKSN 和 EC 组成</li><li>EC：Encryption Counter</li><li>IPEK：Initial PIN Encryption Key</li><li>PEK：PIN Encryption Key，加密 PIN 的密钥</li><li>FK：Future Key</li></ul><h1 id="为什么使用-DUKPT"><a href="#为什么使用-DUKPT" class="headerlink" title="为什么使用 DUKPT"></a>为什么使用 DUKPT</h1><p>在 DUKPT 之前，MK&#x2F;SK 广泛使用，但是会有个问题，不同的终端使用不同的 MK 的话，当要布放的终端数量比较庞大时，收单行就得维护大量的 MK。DUKPT 就解决了这个问题，因为所有的 key 可以从 BDK 衍生，所以只需维护一个 BDK 就行。</p><h1 id="密钥注入过程"><a href="#密钥注入过程" class="headerlink" title="密钥注入过程"></a>密钥注入过程</h1><ol><li>Acquirer 给 POS 灌输 BDK</li><li>BDK + KSN(EC&#x3D;0)  派生出 IPEK</li><li>IPEK + KSN 派生出 21 个 Future Key，分别存在 POS 的 21 个寄存器中:<ul><li>IPEK + KSN(EC&#x3D;1) -&gt; FK1，存在寄存器 1</li><li>IPEK + KSN(EC&#x3D;2) -&gt; FK2，存在寄存器 2</li><li>…</li><li>IPEK + KSN(EC&#x3D;21) -&gt; FK21，存在寄存器 21</li></ul></li><li>销毁 BDK 和 IPEK</li></ol><h1 id="交易过程"><a href="#交易过程" class="headerlink" title="交易过程"></a>交易过程</h1><p>一笔交易从一个寄存器中取出一个 PEK 使用，假设取出寄存器 1 中的 FK1 使用， 交易处理完成后：</p><ul><li>KSN 加 1 后变成 KSN(EC&#x3D;22) </li><li>FK1 + KSN(EC&#x3D;22) -&gt; FK22，替换掉 FK1 存在寄存器 1 中<br>以此类推依次重复使用这 21 个寄存器中的 FK。</li></ul><p>上述流程只讲解到了 Future Key，但实际用于数据（如 PIN、MAC 等）加密的，其实不是直接拿 Future Key 来用的，而是 Future Key xor 分散向量得到的工作密钥，例如：</p><ul><li><p>PIN 密钥的分散向量：00000000000000FF00000000000000FF</p></li><li><p>MAC 密钥的分散向量：000000000000FF00000000000000FF00 </p><p><img src="/img/2019-02-20-dukpt/derived-keys.png" alt="1"></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Key Management </tag>
            
            <tag> PIN Pad </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android FAQ</title>
      <link href="/2018/11/08/android-faq/"/>
      <url>/2018/11/08/android-faq/</url>
      
        <content type="html"><![CDATA[<h1 id="Q-1-No-toolchains-found-in-the-NDK-toolchains-folder-for-ABI-with-prefix-mips64el-linux-android"><a href="#Q-1-No-toolchains-found-in-the-NDK-toolchains-folder-for-ABI-with-prefix-mips64el-linux-android" class="headerlink" title="Q 1. No toolchains found in the NDK toolchains folder for ABI with prefix: mips64el-linux-android"></a>Q 1. No toolchains found in the NDK toolchains folder for ABI with prefix: mips64el-linux-android</h1><p>找到自己本地的 android-sdk：<br><img src="/img/2018-11-08-android-faq/as-sdk.jpg" alt="as-sdk"></p><p>打开这个目录后，查看 <code>ndk-bundle</code> -&gt; <code>toolchains</code> 里面是否确实缺少 mips64el 相关的文件。</p><p>解决办法：</p><ul><li><a href="https://developer.android.com/ndk/downloads/?hl=zh-cn">点击这里</a>下载 NDK 包。</li><li>解压之后打开 <code>toolchains</code> 文件夹，跟本地 <code>toolchains</code> 文件夹做对比，找到其缺少的文件夹，复制过去。</li></ul><h1 id="Q-2-Installation-failed-with-message-Invalid-File"><a href="#Q-2-Installation-failed-with-message-Invalid-File" class="headerlink" title="Q 2. Installation failed with message Invalid File"></a>Q 2. Installation failed with message Invalid File</h1><p>如果设备上应用明明已经卸载了，但是 AS 在 Run 这个应用的时候还是一直提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Installation failed with message Invalid File: xxxx. It is possible that this issue is resolved by uninstalling an existing version of the apk if it is present, and then re-installing.</span><br><span class="line">WARNING: Uninstalling will remove the application data!</span><br><span class="line">Do you want to uninstall the existing application?</span><br></pre></td></tr></table></figure><p>可以尝试以下这个方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Settings&gt;Build,execute,deployment&gt;Instant run&gt;Enable instant run to hot swap code /resource change on deploy(unchecked this option)</span><br></pre></td></tr></table></figure><h1 id="Q-3-Module-not-specified"><a href="#Q-3-Module-not-specified" class="headerlink" title="Q 3. Module not specified"></a>Q 3. Module not specified</h1><p>如果 app 模块上有个红叉：<br><img src="/img/2018-11-08-android-faq/module-not-specified-1.png" alt="module-not-specified-1"><br>且运行的时候弹出如下的提示框：<br><img src="/img/2018-11-08-android-faq/module-not-specified-2.png" alt="module-not-specified-2"><br>在 settings.gradle 中，先注释掉 include’：app’，然后单击 File &gt; Sync Project with Gradle files。<br>此后在 settings.gradle 恢复 include’：app’，再 Sync 工程。</p><h1 id="Q-4-ERROR-SSL-peer-shut-down-incorrectly"><a href="#Q-4-ERROR-SSL-peer-shut-down-incorrectly" class="headerlink" title="Q 4. ERROR: SSL peer shut down incorrectly"></a>Q 4. ERROR: SSL peer shut down incorrectly</h1><p>project 级别的<em>build.gradle</em> 里面把 <code>jcenter()</code> 注释掉。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        maven &#123; url &#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27; &#125;</span><br><span class="line">//        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Q-5-Command-line-is-too-long"><a href="#Q-5-Command-line-is-too-long" class="headerlink" title="Q 5. Command line is too long"></a>Q 5. Command line is too long</h1><p>修改项目下 <code>.idea\workspace.xml</code>，找到标签 <code>&lt;component name=&quot;PropertiesComponent&quot;&gt;</code>， 在标签里加一行<code>&lt;property name=&quot;dynamic.classpath&quot; value=&quot;true&quot; /&gt;</code></p><h1 id="Q-6-Android-Studio-Build-Output-栏内汉字出现乱码"><a href="#Q-6-Android-Studio-Build-Output-栏内汉字出现乱码" class="headerlink" title="Q 6. Android Studio Build Output 栏内汉字出现乱码"></a>Q 6. Android Studio Build Output 栏内汉字出现乱码</h1><p><img src="/img/2018-11-08-android-faq/build-output-mass-code.png" alt="build-output-mass-code"><br>打开 Android Studio 双击 shift 或者点击以下搜索按钮：<br><img src="/img/2018-11-08-android-faq/search.png" alt="search"><br>在搜索框内输入 Edit Custom VM Options：<br><img src="/img/2018-11-08-android-faq/edit-custom-vm-options.png" alt="edit-custom-vm-options"><br>点击第一个选项打开 studio64.exe.vmoptions（若没有此文件，则先创建），添加一句代码 <code>-Dfile.encoding=UTF-8</code>，并编译一下，必须编译，否则 AS 重启的话无法正常打开。<br><img src="/img/2018-11-08-android-faq/studio64-vmoptions.png" alt="studio64-vmoptions"><br>编译以后重启 AS 即可。</p><h1 id="Q-7-Program-type-already-present"><a href="#Q-7-Program-type-already-present" class="headerlink" title="Q 7. Program type already present"></a>Q 7. Program type already present</h1><p>工程结构是这样的：</p><ol><li>lib1 定义的是各种接口文件，导出成 lib1.aar</li><li>lib2 引用 lib1.aar，并对 lib1 的接口进行实现，导出成 lib2.aar</li><li>app 引用 lib1 和 lib2，但是编译的时候一直会提示 <code>Program type already present</code> 的错误，明明只有 lib1 中定义一次的 interface，也还是会提示 <code>Program type already present</code> 这个错误</li></ol><p>各种尝试 <code>implementation</code>、<code>api</code>、<code>compileOnly</code> 来引用这两个 aar，依然会出现这个问题（非常抓狂。。。）。最后看到一个网友说不要使用 <code>implementation fileTree(include: [&#39;*.jar&#39;, &#39;*.aar&#39;], dir: &#39;libs&#39;)</code>，否则就会出现 <code>Program type already present</code> 问题。</p><p>于是终于发现在 app 的 gradle 中要么使用 <code>implementation fileTree(include: [&#39;*.jar&#39;, &#39;*.aar&#39;], dir: &#39;libs&#39;)</code>，一下子引入 libs 下所有的 jar 和 aar：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">implementation fileTree(include: [&#x27;*.jar&#x27;, &#x27;*.aar&#x27;], dir: &#x27;libs&#x27;)</span><br><span class="line">// implementation(name:&#x27;lib1&#x27;,ext:&#x27;aar&#x27;)</span><br><span class="line">// implementation(name:&#x27;lib2&#x27;,ext:&#x27;aar&#x27;)</span><br></pre></td></tr></table></figure><p>要么就是不用 <code>implementation fileTree(include: [&#39;*.jar&#39;, &#39;*.aar&#39;], dir: &#39;libs&#39;)</code>，直接引用具体的 aar：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// implementation fileTree(include: [&#x27;*.jar&#x27;, &#x27;*.aar&#x27;], dir: &#x27;libs&#x27;)</span><br><span class="line">implementation(name:&#x27;lib1&#x27;,ext:&#x27;aar&#x27;)</span><br><span class="line">implementation(name:&#x27;lib2&#x27;,ext:&#x27;aar&#x27;)</span><br></pre></td></tr></table></figure><p>如果同时使用 <code>implementation fileTree</code> 和引用具体的 aar（如下），就会出现 <code>Program type already present</code> 这个错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">implementation fileTree(include: [&#x27;*.jar&#x27;, &#x27;*.aar&#x27;], dir: &#x27;libs&#x27;)</span><br><span class="line">implementation(name:&#x27;lib1&#x27;,ext:&#x27;aar&#x27;)</span><br><span class="line">implementation(name:&#x27;lib2&#x27;,ext:&#x27;aar&#x27;)</span><br></pre></td></tr></table></figure><h1 id="Q-8-android-textAllCaps-”false”"><a href="#Q-8-android-textAllCaps-”false”" class="headerlink" title="Q 8. android:textAllCaps&#x3D;”false”"></a>Q 8. android:textAllCaps&#x3D;”false”</h1><p>在界面添加 Button 的时候，默认 Button 显示的字母都是大写的，即使它的 text 属性设置的都是小写字母。</p><p>解决办法：在 Button 的属性里加上 android:textAllCaps&#x3D;”false” 即可。</p><h1 id="Q-9-Installed-Build-Tools-revision-29-0-2-is-corrupted-Remove-and-install-again-using-the-SDK-Manager"><a href="#Q-9-Installed-Build-Tools-revision-29-0-2-is-corrupted-Remove-and-install-again-using-the-SDK-Manager" class="headerlink" title="Q 9. Installed Build Tools revision 29.0.2 is corrupted. Remove and install again using the SDK Manager"></a>Q 9. Installed Build Tools revision 29.0.2 is corrupted. Remove and install again using the SDK Manager</h1><p>解决办法：</p><ol><li>Open the SDK manager by clicking on the icon in the top right of Android Studio. (Or go to File &gt; Settings &gt; Appearance &amp; Behavior &gt; System Settings &gt; Android SDK)</li><li>Open <strong>SDK Tools</strong> tab</li><li>At the bottom-right, click “Show Package Details”</li><li>Find <strong>Android SDK Build-Tools</strong> and uncheck the checkbox next to 29.0.2</li><li>Click apply in the bottom of the window. That will delete the component.</li><li>Now check the checkbox next to 29.0.2</li><li>Click apply in the bottom of the window. That will reinstall it.</li></ol><h1 id="Q-10-查看-apk-信息（包名、版本号、版本名称、兼容-api-级别、启动-Activity-等）"><a href="#Q-10-查看-apk-信息（包名、版本号、版本名称、兼容-api-级别、启动-Activity-等）" class="headerlink" title="Q 10. 查看 apk 信息（包名、版本号、版本名称、兼容 api 级别、启动 Activity 等）"></a>Q 10. 查看 apk 信息（包名、版本号、版本名称、兼容 api 级别、启动 Activity 等）</h1><ol><li>找到 Android SDK 目录下的 <code>build-tools</code> 文件夹，会有不同版本的，随便点开一个，可以看到 aapt</li><li>可以将 aapt 路径添加到环境变量中，也可以直接在 aapt 所在目录下启动命令行工具</li><li>在命令行工具中输入以下命令获取 apk 信息，比如要获取的 apk 是 app-debug.apk，则运行：<code>aapt dump badging app-debug.apk</code>。当然，apk 需要写全路径</li></ol><h1 id="Q-11-Program-type-already-present-BuildConfig"><a href="#Q-11-Program-type-already-present-BuildConfig" class="headerlink" title="Q 11. Program type already present: BuildConfig"></a>Q 11. Program type already present: BuildConfig</h1><p>检查各个模块的 <code>AndroidManifest.xml</code> 里的 package 是不是有一样的</p><h1 id="Q12-java-io-EOFException-Unexpected-end-of-ZLIB-input-stream"><a href="#Q12-java-io-EOFException-Unexpected-end-of-ZLIB-input-stream" class="headerlink" title="Q12. java.io.EOFException: Unexpected end of ZLIB input stream"></a>Q12. java.io.EOFException: Unexpected end of ZLIB input stream</h1><p>原因：gradle 版本问题<br>修改以下两个地方：</p><ol><li>工程的 <code>build.gradle</code> 文件中将 gradle 版本号改为可以正常运行的版本号  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    // 改成可以正常运行的版本号</span><br><span class="line">    classpath &#x27;com.android.tools.build:gradle:3.1.2&#x27; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>工程的 <code>gradle -&gt; wrapper -&gt; gradle-wrapper.properties</code> 文件中的 gradle 版本也改成可以正常运行的版本号  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">distributionBase=GRADLE_USER_HOME</span><br><span class="line">distributionPath=wrapper/dists</span><br><span class="line">// 改为可以正常运行项目的 gradle 版本号</span><br><span class="line">distributionUrl=https\://services.gradle.org/distributions/gradle-5.6.4-all.zip</span><br><span class="line">zipStoreBase=GRADLE_USER_HOME</span><br><span class="line">zipStorePath=wrapper/dist</span><br></pre></td></tr></table></figure></li></ol><h1 id="Q13-adb-connect-时报错：由于目标计算机积极拒绝，无法连接"><a href="#Q13-adb-connect-时报错：由于目标计算机积极拒绝，无法连接" class="headerlink" title="Q13. adb connect 时报错：由于目标计算机积极拒绝，无法连接"></a>Q13. adb connect 时报错：由于目标计算机积极拒绝，无法连接</h1><ol><li>使用 USB 数据连接手机和电脑</li><li>在 PC 端运行 cmd 命令：<code>adb devices</code>，能看到已经连接的设备</li><li>输入 <code>adb tcpip 8888</code></li><li>断开手机和电脑的 USB 连接</li><li>假设此时手机的 ip 是 192.168.43.68，则在 PC 端 cmd 输入 <code>adb connect 192.168.43.68:8888</code>，即可连接成功</li></ol><h1 id="Q14-Error-java-lang-NullPointerException-no-error-message"><a href="#Q14-Error-java-lang-NullPointerException-no-error-message" class="headerlink" title="Q14. Error:java.lang.NullPointerException(no error message)"></a>Q14. Error:java.lang.NullPointerException(no error message)</h1><p>工程代码切到大半年前的一个 commit，那个时候编译是没有问题，但是现在代码切回去编译就会提示 <code>Error:java.lang.NullPointerException(no error message)</code>。因为之前编译是没有问题的，所以肯定不是代码的问题，应该就是编译环境和依赖的版本导致的。</p><p>现在使用的 AndroidStudio 的版本是 4.1 的，那就把 gradle 也同步升级一下，在工程目录下的 <code>build.gradle</code> 里面将 gradle 版本升级到 4.1.2：<br><code>classpath &#39;com.android.tools.build:gradle:4.1.2&#39;</code></p><p>然后工程目录的 <code>gradle</code> 文件夹下的 &#96;&#96; 升级  gradle 版本：<br><code>distributionUrl=https\://services.gradle.org/distributions/gradle-6.5-bin.zip</code></p><p>重新编译工程就可以了。</p><h1 id="Q15-JNI-问题：-java-lang-NoSuchFieldError"><a href="#Q15-JNI-问题：-java-lang-NoSuchFieldError" class="headerlink" title="Q15.JNI 问题： java.lang.NoSuchFieldError"></a>Q15.JNI 问题： java.lang.NoSuchFieldError</h1><p>在 java 上定义了一个类 A，里面包含一个类 B 的字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> B fieldB;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义的 JNI 接口有一个参数传的是类 A 的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJNI</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">testMethod</span><span class="params">(A aObj)</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 jni 层想要获取 A 对象的 B 字段进行设置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JNIEXPORT jint JNICALL</span><br><span class="line"><span class="title function_">Java_com_example_TestJNI_testMethod</span><span class="params">(JNIEnv *env, jobject thiz, jobject aObj)</span> &#123;</span><br><span class="line">    jclass aObjCls = (*env)-&gt;GetObjectClass(env, aObj);</span><br><span class="line">    jobject fieldB = (*env)-&gt;GetObjectField(env, aObj, (*env)-&gt;GetFieldID(env, aObjCls, <span class="string">&quot;fieldB&quot;</span>, <span class="string">&quot;com/example/B&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：在 SDK 25 的时候，这么写是没有问题的。但是在 SDK 29（不确定从哪个 SDK 之后）这么写就会返回“java.lang.NoSuchFieldError”的问题，必须得这么写（GetFieldID 时 fieldB 的签名前面多了“L”，后面多了“;”）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobject fieldB = (*env)-&gt;GetObjectField(env, aObj, (*env)-&gt;GetFieldID(env, aObjCls, <span class="string">&quot;fieldB&quot;</span>, <span class="string">&quot;Lcom/example/B;&quot;</span>));</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/15783344/get-object-from-an-object-with-jni-in-c">https://stackoverflow.com/questions/15783344/get-object-from-an-object-with-jni-in-c</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navigation</title>
      <link href="/2018/11/07/navigation/"/>
      <url>/2018/11/07/navigation/</url>
      
        <content type="html"><![CDATA[<h1 id="向上（Up）-vs-返回（Back）"><a href="#向上（Up）-vs-返回（Back）" class="headerlink" title="向上（Up） vs 返回（Back）"></a>向上（Up） vs 返回（Back）</h1><p>看 <a href="https://developer.android.com/topic/libraries/architecture/navigation/navigation-principles">Principles of Navigation</a> 的时候，有点不明白 Up 和 Back 按钮的区别，查了相关资料以后搞明白了：</p><ul><li>Up 按钮用来在应用内，根据应用的逻辑<strong>层级</strong>进行导航，返回到上一个层级，如果某个屏幕已经是该应用的顶层了 (例如，应用的主页)，那不需要 Up 按钮，所以 Up 按钮不会退出应用。</li><li>系统的 Back 键则用于按照切换历史返回到之前的<strong>屏幕</strong>。这种导航基于是基于时间轴的，永远是返回到上一个界面视图，而不是基于应用的逻辑层级。</li></ul><p> <img src="/img/2018-11-07-navigation/up-vs-back.jpg" alt="up-vs-back"></p><p>如果之前的屏幕就是逻辑层次的上一层，那么 Back 和 Up 的行为是一样的。不过和 Up 不同的是，Back 可能回到主屏幕或者其他的应用，Up 回到的屏幕总是在你的应用中。</p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> navigation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidX</title>
      <link href="/2018/10/23/AndroidX/"/>
      <url>/2018/10/23/AndroidX/</url>
      
        <content type="html"><![CDATA[<p>题外话：比起支持，果然还是开发适合我，内心平静了好多。</p><p>官方介绍：<a href="https://developer.android.com/jetpack/androidx/">AndroidX</a></p><p>迁移步骤：</p><ol><li><p>将 Android Studio 升级到 3.2 以上的版本，project 下的 gradle 里面 <code>com.android.tools.build:gradle</code> 的版本号要改成 <code>3.2.1</code></p></li><li><p>修改 gradle.properties</p><p><code>android.useAndroidX=true</code></p><p><code>android.enableJetifier=true</code></p></li><li><p>打开 module 下面的 build.gralde 文件</p><ul><li>compileSdkVersion 更改为 28</li><li>targetSdkVersion 更改为 28</li></ul></li><li><p>在AndroidStudio 中执行如下操作：<code>Refactor &gt; Migrate to AndroidX</code></p></li></ol><p>迁移后续：</p><ol><li>由于 <code>Migrate to AndroidX</code> 执行之后，部分控件的包名&#x2F;路径名的自动转换是有问题的，所以还需要我们手动调整。如：ViewPager，RecyclerView 等，这些内容在迁移完成之后，Android Studio 帮我们自动转换的包名是 <code>androidx.core.weight.xxxx</code>，这是一个错误的包名，我们必须手动修改，否则编译就会出错。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 问题</title>
      <link href="/2018/10/17/hexo-%E9%97%AE%E9%A2%98/"/>
      <url>/2018/10/17/hexo-%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>每次隔一段时间不发布博客，总会冒出新问题。</p><p>这次是执行 <code>hexo d</code> 的时候提示：</p><p><img src="/img/2018-10-17-hexo-%E9%97%AE%E9%A2%98/hexo-problem-1.jpg" alt="1"></p><p>于是上网搜，反正就是先测试 ssh 是否可以连接，<code>ssh -T git@github.com</code>，然后就可以了：</p><p><img src="/img/2018-10-17-hexo-%E9%97%AE%E9%A2%98/hexo-problem-2.jpg" alt="2"></p><h1 id="github-io-拒绝了我们的连接请求"><a href="#github-io-拒绝了我们的连接请求" class="headerlink" title="github.io 拒绝了我们的连接请求"></a>github.io 拒绝了我们的连接请求</h1><ol><li><p>通过<a href="http://tool.chinaz.com/dns/">站长之家 DNS 查询</a>，查询自己博客可用的 ip。</p><p> <img src="/img/2018-10-17-hexo-%E9%97%AE%E9%A2%98/dns.png" alt="dns"></p></li><li><p>使用管理员权限打开记事本，然后在记事本中打开 C:\Windows\System32\drivers\etc\hosts 文件，将上面查询到的 ip 带上自己博客的域名加到 hosts 文件中，保存即可。<br> <img src="/img/2018-10-17-hexo-%E9%97%AE%E9%A2%98/hosts.png" alt="hosts"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CA 证书</title>
      <link href="/2018/10/17/CA-%E8%AF%81%E4%B9%A6/"/>
      <url>/2018/10/17/CA-%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h1><ul><li><p>CA 是  <a href="https://en.wikipedia.org/wiki/Certificate_authority">Certificate Authority</a> 的缩写，也叫“证书授权中心”。</p></li><li><p>CA 证书就是由 CA 机构发布的数字证书。</p></li><li><p>SSL（security sockets layer，安全套接层）是为网络通信提供安全及数据完整性的一种安全协议。SSL3.0 版本以后又被称为 TLS。SSL 采用了两种手段：身份认证和数据加密，来保证网络通信的安全和数据的完整性。<strong>身份认证就需要用到 CA 证书了。</strong></p></li><li><p>证书之间的信任关系：就是用一个证书来证明另一个证书是真实可信的。</p></li><li><p>证书信任链：证书之间的信任关系是可以嵌套的。比如，C 信任 A1，A1 信任 A2，A2 信任 A3……这个叫做证书的信任链。只要你信任链上的头一个证书，那后续的证书，都是可以信任的。</p></li><li><p>根证书：假设 C 证书信任 A 和 B，然后 A 信任 A1 和 A2，B 信任 B1 和 B2，则它们之间构成如下的一个树形关系（一个倒立的树）：</p><p><img src="/img/2018-10-17-ca/root-certificate.png" alt="root-certificate"></p><p>处于最顶上的树根位置的那个证书，就是根证书。除了根证书，其它证书都要依靠上一级的证书，来证明自己。那谁来证明根证书的可靠呢？实际上，根证书自己证明自己是可靠的（或者换句话说，根证书是不需要被证明滴）。</p><p>所以根证书是整个证书体系安全的根本。如果某个证书体系中，根证书出了问题（不再可信了），那么所有被根证书所信任的其它证书，也就不再可信了。</p><p>（<a href="https://blog.csdn.net/albertjone/article/details/78166059%EF%BC%89">https://blog.csdn.net/albertjone/article/details/78166059）</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sublime</title>
      <link href="/2018/07/23/sublime/"/>
      <url>/2018/07/23/sublime/</url>
      
        <content type="html"><![CDATA[<h1 id="安装-Package-Control"><a href="#安装-Package-Control" class="headerlink" title="安装 Package Control"></a>安装 Package Control</h1><p><a href="https://packagecontrol.io/installation">https://packagecontrol.io/installation</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> sublime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>台湾个人游材料准备</title>
      <link href="/2018/07/18/taiwan/"/>
      <url>/2018/07/18/taiwan/</url>
      
        <content type="html"><![CDATA[<p>虽然是因为出差要去台湾，但是办的是台湾个人游的手续。由于福州人滞留台湾的名声比较坏，所以福州人要去台湾旅游是非常不容易的，有些旅行社为了保证福州人不会滞留台湾，办证都要先交 2 万押金，等到从台湾回来了才会返还这 2 万押金。</p><h1 id="需要办理"><a href="#需要办理" class="headerlink" title="需要办理"></a>需要办理</h1><p>去台湾旅行需要 2 证 1 签注：</p><ul><li>台湾通行证：这是大陆签发的允许大陆居民去台湾的证</li><li>入台证：这是台湾签发的允许大陆居民进入台湾的证</li><li>签注：个人游是办 G 签</li></ul><h1 id="关于通行证和签注"><a href="#关于通行证和签注" class="headerlink" title="关于通行证和签注"></a>关于通行证和签注</h1><p>台湾通行证和签注比较好办理，一般拿着户口本和身份证去出入境就可以办理。</p><p>如果已经有通行证了，在微信上关注“福建省公安厅出入境管理局”公众号，选择：“业务办理” -&gt; “往来台湾旅行签注申请”，填写签注申请以后，可以选择快递服务，邮政就会派人上门收证（台湾通行证），大概 3 个工作日以后会把签注好的通行证再送回来，来回快递只需 20。</p><h1 id="关于入台证"><a href="#关于入台证" class="headerlink" title="关于入台证"></a>关于入台证</h1><p>比较麻烦的是入台证，需要准备很多材料。我这次就提交了以下这些材料：</p><ul><li>本人身份证正反、面扫描件</li><li>本人户口簿页，户口簿首页，户口簿户主页</li><li>紧急联系人身份证正、反面扫描件</li><li>紧急联系人户口簿页</li><li>台湾通行证个人信息页，签注页</li><li>2 寸白底证件照：露耳</li><li>收入证明：我是让公司人力帮忙开了个年收入证明（模板填写要求如下贴图），<a href="/doc/%E6%94%B6%E5%85%A5%E8%AF%81%E6%98%8E%EF%BC%88%E6%A8%A1%E6%9D%BF%EF%BC%89.doc">收入证明模板下载</a><br><img src="/img/2018-07-18-taiwan/income.JPG" alt="income"></li><li><a href="/doc/%E5%A4%A7%E9%99%B8%E5%9C%B0%E5%8D%80%E4%BA%BA%E6%B0%91%E7%B7%8A%E6%80%A5%E8%81%AF%E7%B5%A1%E4%BA%BA%E8%B3%87%E6%96%99%E8%A1%A8.doc">《大陆地区人民紧急联络人资料表》</a>：填写相关信息以后打印出来签了字再扫描。</li><li><a href="/doc/%E5%A4%A7%E9%99%B8%E5%9C%B0%E5%8D%80%E4%BA%BA%E6%B0%91%E7%94%B3%E8%AB%8B%E4%BE%86%E8%87%BA%E5%BE%9E%E4%BA%8B%E5%80%8B%E4%BA%BA%E6%97%85%E9%81%8A%E8%A1%8C%E7%A8%8B%E8%A1%A8.doc">《大陆地区人民申请来台从事个人旅游行程表》</a>：也是填写完以后打印出来签个字再扫描</li></ul><h1 id="实用工具推荐"><a href="#实用工具推荐" class="headerlink" title="实用工具推荐"></a>实用工具推荐</h1><p>推荐一款手机软件：“扫描全能王”，这个软件可以自动识别四边，把拍出来的证件四边拉正，然后可以导出成图片或者 pdf，不过免费版的导出 pdf 会在页面下方加上该软件的二维码，所以我一般都是导出成图片。我觉得只要拍照的光线够好，拍的时候不要有阴影在照片上，基本上这个软件做出的扫描效果跟用扫描机扫描的差不多了。</p><p><img src="/img/2018-07-18-taiwan/scan1.jpg" alt="scan1"></p><p><img src="/img/2018-07-18-taiwan/scan2.jpg" alt="scan2"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 旅游 </tag>
            
            <tag> 出差 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H5 桌面应用开发</title>
      <link href="/2018/07/01/h5app/"/>
      <url>/2018/07/01/h5app/</url>
      
        <content type="html"><![CDATA[<p>我打算自学开发一个 H5 桌面应用出来。目前只是对 js 有些了解，这里先记录一下需要学习的技术：</p><ul><li>HTML5</li><li>Electron：包装 HTML 页面，为网页提供一个本地运行环境。<a href="https://electronjs.org/docs">https://electronjs.org/docs</a></li><li>Node.js：这个之前用过，相对来说还是比较了解一点</li><li>CSS</li><li>UI</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> H5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Head First Java》学习笔记</title>
      <link href="/2018/06/30/head-first-java/"/>
      <url>/2018/06/30/head-first-java/</url>
      
        <content type="html"><![CDATA[<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><ul><li>创建对象时，它会被存放在称为堆的内存区域中，此区域并非普通的堆，它是可回收垃圾的堆。</li><li>没有对象变量这样的东西存在，只有引用到对象的变量，它并不是对象的容器（因为对象都是保存在堆里），而是类似指向对象的指针，或者可以说是地址。</li><li><code>Dog myDog = new Dog();</code> 这样一个语句，其实包含了三个步骤：<ul><li><code>Dog myDog</code> 声明了一个引用变量，java 虚拟机会分配空间给引用变量。</li><li><code>new Dog()</code> 创建一个对象，java 虚拟机会分配堆空间给新建立的 Dog 对象。</li><li><code>=</code> 将新的 Dog 对象与引用变量连接起来了。</li></ul></li><li>对于任意一个 java 虚拟机来说，所有引用变量的大小都一样，不管它实际上所引用的对象大小。但是，不同的 java 虚拟机间可能会以不同的方式来表示引用，因此某个 java 虚拟机的引用大小可能会大于或者小于另一个 java 虚拟机的引用变量。</li><li>一个引用变量如果被标记成 final 的，一旦被指派给某个对象了，就被固定下来了，不能再指派除了这个对象以外的对象给这个引用变量了。</li><li>数组是一个对象，不管里面放的是基础数据类型，还是对象引用。</li><li>实例变量（类的属性字段）默认值： <ul><li>int：0</li><li>float：0.0</li><li>boolean：false</li><li>引用：null</li></ul></li><li>局部变量（方法中定义的变量）没有默认值，如果局部变量没有初始化就要使用的话，编译器会显示错误。</li></ul><h1 id="极限编程"><a href="#极限编程" class="headerlink" title="极限编程"></a>极限编程</h1><ul><li>多次经常性的小规模发布</li><li>避免加入规格没有的功能，不管“未来”会用到的功能性有多诱人</li><li>先写测试用的程序</li><li>正常工作上下班</li><li>随时随地重构，也就是改善程序代码</li><li>保持简单</li><li>双双结伴进行工作，并经常交换合作伙伴，以便让大家都清楚全局</li></ul><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><ul><li>如果声明一个抽象的方法，就必须将类也标记为抽象的，不能在非抽象类中拥有抽象方法。就算只有一个抽象的方法，此类也要标记为抽象的。</li><li>抽象的方法没有内容，它只是为了标记处多态而存在。它的声明以分号结束。</li><li>抽象类可以带有抽象和非抽象的方法。</li><li>接口的方法带有 <code>public</code> 和 <code>abstract</code> 的意义，它们一定是抽象的，没有内容的。</li><li>extend 只能一个，implement 可以有好多个。</li></ul><h1 id="构造器与垃圾回收器"><a href="#构造器与垃圾回收器" class="headerlink" title="构造器与垃圾回收器"></a>构造器与垃圾回收器</h1><ul><li>在 java 中，程序员会在乎内存中的两种区域：<ul><li>对象的生存空间堆（heap），又称为可垃圾回收的堆</li><li>方法调用及变量的生存空间 栈（stack）</li></ul></li><li>因为对象是存在于堆上，所以实例变量存在于对象所属的堆空间上。实例变量又分两种情况：<ul><li>基础数据类型的实例变量：实例变量的值是存放在对象中，java 会依据数据类型为实例变量留下空间。</li><li>引用的实例变量：java 只会为包含这个引用的对象留下引用所用到的空间，而不是这个引用的对象所用的空间。而引用的对象要等到这个引用被赋值的时候，java 才会给在堆上给这个引用的对象分配空间。</li></ul></li><li>编译器只会在你完全没有写构造函数时才会帮你建一个无参的构造函数。如下：<br><code>public ClassName()&#123; super(); &#125;</code><br>当你已经写了一个有参数的构造函数，但是又需要一个无参的构造函数时，你就要自己手动写一个无参的构造函数。</li><li>如果你有构造函数但没有调用 <code>super()</code>，编译器会帮你对每个重载版本的构造函数加上 <code>super()</code>。编译器帮忙加的一定会是没有参数的版本，即使父类有多个重载版本，也只有无参数的这个版本会被调用到。<code>super()</code> 必须是构造函数的第一个语句。</li><li>使用 <code>this()</code> 来从某个构造函数调用同一个类的另一个构造函数。<code>this()</code> 只能用在构造函数中，且必须是第一行语句。所以，<code>super()</code> 和 <code>this()</code> 不能兼得。</li><li>对象的生命周期完全要看引用到它的“引用”。如果引用还活着，则对象也会继续活在堆上。如果引用死了，对象也就跟着消亡了。</li><li>局部变量只会存活在声明该变量的方法中。实例变量的寿命与对象相同。如果对象还活着，则实例变量也会活着。</li><li>life 与 scope 的区别：只要变量的堆栈块还存在于堆栈上，变量就还活着。但是当此方法调用别的方法时，该变量虽然还活着，但是超出了变量的使用范围。</li><li>有 3 种方法释放对象的引用：<ul><li>引用永久性地离开它的范围，比如一个方法执行结束了，那在这个方法内声明的引用变量就消失了，引用的对象就会变成可回收的了。</li><li>引用被赋值到其他对象上。</li><li>直接将引用设定为 null。</li></ul></li></ul><h1 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h1><ul><li>静态方法不能调用非静态的变量和方法。</li><li>静态变量：被同类的所有实例共享的变量，是在类被加载时初始化的，会在该类的任何对象创建之前、在该类的任何静态方法执行之前初始化的。</li><li>静态变量值必须在声明或者静态初始化程序中赋值。</li><li>通常，java 虚拟机会加载某个类，是因为第一次有人尝试要创建该类的实例，或是使用该类的静态方法或变量。</li><li>关于 final：<ul><li>final 的变量代表不能改变它的值。</li><li>final 的方法代表不能覆盖掉该方法。</li><li>final 的类代表不能继承该类。</li></ul></li><li>如果类只有静态的方法，可以将该类的构造函数标记为 private 的以避免被初始化。</li><li>在 java 中的常量是把变量同时标记为 static 和 final 的。</li><li>Boolean 没有 <code>parseBoolean()</code> 方法，但是 Boolean 的构造函数可以取用 String 来创建对象，如：<code>boolean b = new Boolean(&quot;true&quot;).booleanValue();</code>。</li><li>format 格式化说明：<code>%[argument number][flags][width][.precision]type</code>，其中 <code>[]</code> 里面的都是可选项目，只有 <code>%</code> 和 <code>type</code> 是必要的。<ul><li><code>argument number</code>：如果要格式化的参数超过一个以上，可以在这里指定是哪一个。</li><li><code>flags</code>：特定类型的特定选项，例如数字要加逗号或者正负号。</li><li><code>width</code>：最小的字符数，输出可以超过此宽度，若不足则会自动补零。</li><li><code>.precision</code>：精确度，注意前面有个圆点符号。<br>例如，<code>format(&quot;%,6.1f&quot;, 42.000)</code> 中，<code>%,6.1f</code> 的 <code>,</code> 是 <code>flags</code>，<code>6</code> 是 <code>width</code>，<code>.1f</code> 是 <code>.precision</code></li></ul></li><li><code>&lt;</code> 这个符号是个特殊的指示，用来告诉格式化程序重复利用之前用过的参数。例如：<br><code>String.format(&quot;%tA, %tB %td&quot;, today, today, today);</code><br>可改成：<br><code>String.format(&quot;%tA, %&lt;tB %&lt;td&quot;, today);</code></li><li>要取用当前的日期时间就用 Date，其余功能可以从 Calendar 上面找。</li></ul><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><ul><li>编译器不会注意 RuntimeException 类型的异常。因为大部分的 RuntimeException 都是因为程序逻辑的问题，try&#x2F;catch 是用来处理真正的异常，而不是程序的逻辑错误。</li><li>有多个 catch 块时要从小排到大。</li></ul><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><ul><li>序列化：object -&gt; ObjectOutputStream(对象被碾平) -&gt; FileOutputStream（对象被当做字节处理）-&gt; 文件</li><li>反序列化：文件 -&gt; FileOutputStream（对象被当做字节读入）-&gt; ObjectInputStream（加载类，加载实例变量的存储值）-&gt; 对象</li><li>序列化程序会将对象版图上的所有东西存储起来。被对象的实例变量所引用的所有对象都会被序列化。</li><li>Serializable 是标记用接口，并没有任何方法需要实现的，它的唯一目的就是声明有实现它的类是可以被序列化的。</li><li>整个对象版图都必须正确地序列化，不然就得全部失败。如果需要序列化的对象中有变量不能被序列化，则这个对象就会序列化失败。如果某实例变量不能或者不应该被序列化，就把它标记为 transient 的。标记为 transient 的变量在恢复的时候是 null（对对象应用而已）或者基础数据类型的默认值。</li><li>如果两个要序列化的对象都有引用实例变量指向相同的对象，那么只有一个对象会被存储，其他引用会复原指向该对象。</li><li>静态变量不会被序列化。因为静态变量代表“每个类一个”而不是“每个对象一个”。所以当对象被还原时，静态变量会维持类中原本的样子，而不是对象存储时的样子。</li></ul><h1 id="网络与线程"><a href="#网络与线程" class="headerlink" title="网络与线程"></a>网络与线程</h1><ul><li>TCP 端口是个 16 位的值。从 0<del>1023 的 TCP 端口号是保留给已知的特定服务使用，从 1024</del>65535 可以根据需要来使用。</li><li>一旦建立了连接，客户端可以从 socket 取得底层串流：<br><code>sock.getInputStream()</code></li><li>InputStreamReader 是个转换字节成字符的桥梁。它主要用来链接 BufferedReader 与底层的 Socket 输入串流。<br><code>InputStreamReader stream = new InputStreamReader(sock.getInputStream());</code></li><li>BufferedReader 链接 InputStreamReader 与来自 Socket 的输入串流以读取服务器的文本数据。<br><code>BufferedReader reader = new BufferedReader(stream);</code></li><li>PrintWriter 直接链接 Socket 输出串流，可直接调用 <code>print()</code> 和 <code>println()</code> 输出字符串给服务器。<br><code>PrintWriter writer = new PrintWriter(sock.getOutputStream());</code><br><code>writer.println(&quot;message to send&quot;);</code></li><li>Thread 是工人，Runnable 是这个工人的工作。</li><li>当创建了一个 Thread 对象 t，执行 <code>t.start()</code> 只是让它变成可执行的状态，什么时候真正执行，是 java 虚拟机的线程调度机制来决定的。一旦线程进入可执行状态，它会在可执行与执行中两种状态来来去去，同时也有另一种状态：暂时不可执行（又称为被堵塞状态）</li><li>线程调度器会决定哪个线程从等待状态中被挑出来运行，以及何时把哪个线程送回等待被执行的状态。它会决定某个线程要运行多久，当线程被踢出时，调度器也会指定线程要回去等待下一个机会或者是暂时地堵塞。调度器在不同的 java 虚拟机上面有不同的做法。</li><li>每个对象有一个锁，每个锁只有一把钥匙。通常对象时没有上锁的，当对象有一个或者多个同步化的方法时，线程只有在取得对象锁的钥匙才能进入同步化的方法。</li><li>使用 synchronized 关键词来修饰方法，使它每次只能被单一的线程存取。要保护数据，就把作用在数据上的方法给同步化。所以线程执行时遇上同步化的方法，会认知到它需要对象的钥匙才可以进入该方法。它会取得钥匙（这是由 java 虚拟机来处理的），如果可以拿到钥匙，才可以进入方法，并在完成同步化方法以后放开钥匙。当线程持有钥匙时，没有其他线程可以进入该对象的同步化方法，因为每个对象只有一个钥匙。</li><li>同步化的方法有一些额外的成本：<ul><li>查询钥匙等性能上的损耗</li><li>同步化的方法会让程序因为要同步并行而慢下来</li><li>可能会导致死锁现象<br>原则上应该只做最少量的同步化，可用 synchronized 来修饰一行或者数行的指令而不必整个方法都同步化。</li></ul></li><li>每个被载入的类也是有锁的。所以如果有 3 个 Dog 对象在堆上，则表示有 4 个与 Dog 有关的锁。3 个是 Dog 实例的，一个是 Dog 类的。当你要对静态方法做同步化时，java 会使用类本身的锁。</li></ul><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><ul><li>使用 <code>Collections.sort()</code> 方法进行排序的对象需要实现 <code>Comparable</code> 接口，或者使用 <code>Comparator</code>。如果传 <code>Comparator</code> 给 <code>sort()</code> 方法，则排序是由 <code>Comparator</code> 而不是对象的 <code>compareTo()</code> 方法来决定。</li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><code>&amp;</code> 和 <code>|</code> 通常会用来做位运算，但是用在 boolean 表达式时，会强制 java 虚拟机一定要计算运算符两边的算式。</li><li>使用 import 只是帮你省下每个类前面的包名称而已，程序不会因为用了 import 而变大或变慢。</li><li>像 <code>java.lang</code>，它是一个预先被引用的包，因为 <code>java.lang</code> 是个经常会用到的基础包，所以可以不必 import，<code>java.lang.String</code> 与 <code>java.lang.System</code> 是独一无二的 class，java 会知道要去哪里找。</li><li>内部类可以使用外部所有的方法与变量，就算私用的也一样。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>完全卸载 parallels desktop</title>
      <link href="/2018/06/28/uninstall-parallels-desktop/"/>
      <url>/2018/06/28/uninstall-parallels-desktop/</url>
      
        <content type="html"><![CDATA[<p>sudo rm -rf &#x2F;Users&#x2F;这里改成你的系统用户名&#x2F;Library&#x2F;Preferences&#x2F;com.parallel*</p><p>sudo rm -rf &#x2F;Users&#x2F;这里改成你的系统用户名&#x2F;Library&#x2F;Parallels</p><p>sudo rm -rf &#x2F;private&#x2F;var&#x2F;db&#x2F;Parallels</p><p>sudo rm -rf &#x2F;Library&#x2F;Logs&#x2F;parallels*</p><p>sudo rm -rf &#x2F;Library&#x2F;Preferences&#x2F;Parallels</p><p>sudo rm -rf  &#x2F;private&#x2F;var&#x2F;.Parallels_swap</p>]]></content>
      
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《RxJava2.x 实战》学习笔记</title>
      <link href="/2018/06/24/rxjava2x/"/>
      <url>/2018/06/24/rxjava2x/</url>
      
        <content type="html"><![CDATA[<p>本文中的学习测试代码：<a href="https://github.com/AnnieCyl/rxjavastudy">https://github.com/AnnieCyl/rxjavastudy</a></p><h1 id="Rx"><a href="#Rx" class="headerlink" title="Rx"></a>Rx</h1><p>Rx &#x3D; Observables + LINQ + Schedulers</p><h1 id="RxJava-使用三步骤"><a href="#RxJava-使用三步骤" class="headerlink" title="RxJava 使用三步骤"></a>RxJava 使用三步骤</h1><ol><li>创建 Observable</li><li>创建 Observer</li><li>使用 subscribe() 进行订阅</li></ol><h1 id="subscribe-重载方法"><a href="#subscribe-重载方法" class="headerlink" title="subscribe 重载方法"></a>subscribe 重载方法</h1><ul><li>subscribe(onNext)</li><li>subscribe(onNext, onError)</li><li>subscribe(onNext, onError, onComplete)</li><li>subscribe(onNext, onError, onComplete, onSubscribe)</li></ul><h1 id="5-种被观察者类型"><a href="#5-种被观察者类型" class="headerlink" title="5 种被观察者类型"></a>5 种被观察者类型</h1><ul><li>Observable：能够发射 0 或 n 个数据，并以成功或者错误事件终止。</li><li>Flowable：能够发射 0 或 n 个数据，并以成功或者错误事件终止。支持背压，可以控制数据源发射的速度。</li><li>Maybe：能够发射 0 或者 1 个数据，要么成功，要么失败。只有 onComplete、onSuccess 和 onError 事件，三者选其一。</li><li>Single：只发射单个数据或错误事件，只有 onSuccess 和 onError 事件。</li><li>Completable：从来不发射数据，只处理 onComplete 和 onError 事件。可以看成 Rx 的 Runnable。常常结合 <code>andThen</code> 操作符使用。</li></ul><h1 id="do-操作符"><a href="#do-操作符" class="headerlink" title="do 操作符"></a>do 操作符</h1><p>do 操作符可以给 Observable 的生命周期的各个阶段加上一系列的回调监听：（以下基本是按照 do 操作的执行顺序排序）</p><ul><li>doOnSubscribe：一旦观察者订阅了 Observable，它就会被调动。</li><li>doOnLifecycle：可以在观察者订阅之后，设置是否取消订阅。</li><li>doOnNext：Observable 每发射一项数据就会调用它一次，在 onNext 之前执行。</li><li>doOnEach：Observable 每发射一项数据就会调用它一次，在 doOnNext、doOnError 和 doOnComplete 之后，onNext、onError 和 onComplete 之前执行。</li><li>doAfterNext：在 onNext 之后执行。</li><li>doOnComplete：当 Observable 正常终止调用 onComplete 前会被调用。</li><li>doFinally：Observable 终止之后会被调用，无论是正常终止还是异常终止。</li><li>doAfterTerminate：注册一个 Action，当 Observable 调用 onComplete 或者 onError 时触发。</li></ul><h1 id="Hot-Observable-和-Cold-Observable"><a href="#Hot-Observable-和-Cold-Observable" class="headerlink" title="Hot Observable 和 Cold Observable"></a>Hot Observable 和 Cold Observable</h1><h2 id="Hot-Observable"><a href="#Hot-Observable" class="headerlink" title="Hot Observable"></a>Hot Observable</h2><ul><li>无论有没有观察者进行订阅，事件始终会发生</li><li>Hot Observable 与订阅者们的关系是一对多的关系</li><li>好比是一个广播电台，所有此刻收听的听众都会听到同一首歌</li></ul><h2 id="Cold-Observable"><a href="#Cold-Observable" class="headerlink" title="Cold Observable"></a>Cold Observable</h2><ul><li>只有观察者订阅了，才开始执行发射数据流的代码</li><li>Cold Observable 和 Observer 是一对一的关系</li><li>好比是一张音乐 CD，人们可以独立购买并听取它</li><li>just、create、range、fromXXX 等操作符都能生成 Cold Observable</li></ul><h2 id="Cold-Observable-转成-Hot-Observable"><a href="#Cold-Observable-转成-Hot-Observable" class="headerlink" title="Cold Observable 转成 Hot Observable"></a>Cold Observable 转成 Hot Observable</h2><ul><li>使用 <code>publish()</code>，生成 <code>ConnectableObservable</code>。生成的 <code>ConnectableObservable</code> 并不是 subscribe 的时候就发射数据，而是只有对其应用 <code>connect()</code> 的时候才开始发射数据。</li><li>使用 Subject&#x2F;Processor：Subject 作为观察者，可以订阅目标 Cold Observable，使对方开始发送事件，让 Cold Observable 借助 Subject 转换为 Hot Observable。</li></ul><h2 id="Hot-Observable-转成-Cold-Observable"><a href="#Hot-Observable-转成-Cold-Observable" class="headerlink" title="Hot Observable 转成 Cold Observable"></a>Hot Observable 转成 Cold Observable</h2><ul><li>ConnectableObservable 的 <code>refCount</code> 操作符。RefCount 跟踪有多少个观察者订阅它：<ul><li>如果所有订阅者都取消订阅了，则数据流停止；如果重新订阅，则重新开始数据流。</li><li>如果不是所有订阅者都取消了订阅，而只是部分取消，则部分订阅者重新开始订阅时，不会从头开始数据流。</li></ul></li><li>Observable 的 <code>share</code> 操作符。其实 <code>share</code> 操作符封装了 <code>publish().refCount()</code></li></ul><h1 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h1><p>详细可参见这个链接：<a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Subject.html">https://mcxiaoke.gitbooks.io/rxdocs/content/Subject.html</a>          </p><ul><li>AsyncSubject：Observer 会接收 AsyncSubject 的 <code>onComplete()</code> 之前的最后一个数据。<code>subject.onComplete()</code> 必须要调用才会开始发送数据，否则观察者将不接收任何数据。</li><li>BehaviorSubject：Observer 会先接收到 BehaviorSubject 被订阅之前的最后一个数据，再接收订阅之后发射过来的数据。如果 BehaviorSubject 被订阅之前没有发送任何数据，则会发送一个默认数据。</li><li>ReplaySubject：ReplaySubject 会发射所有来自原始 Observable 的数据给观察者，无论它们是何时订阅的。ReplaySubject 可以限制缓存数据的数量（<code>createWithSize()</code>），也可以限制缓存的时间（<code>createWithTime()</code>）。</li><li>PublishSubject：Observer 只接收 PublishSubject 被订阅之后发送的数据。</li></ul><h1 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a>Operator</h1><h2 id="fromArray"><a href="#fromArray" class="headerlink" title="fromArray"></a>fromArray</h2><p>只有当要发送的是<strong>对象数组</strong>时，才会将数组里面的元素一个个发出，否则就是一整个数组发出。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Integer[] arr1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">Observable.fromArray(arr1)</span><br><span class="line">      .doOnNext(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Integer&gt;() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Integer i)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;Observable.array1: &quot;</span> + i);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .subscribe();</span><br><span class="line">      </span><br><span class="line">Observable.fromArray(arr2)</span><br><span class="line">      .doOnNext(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(<span class="type">int</span>[] i)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;Observable.array2: &quot;</span> + i);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .subscribe();</span><br></pre></td></tr></table></figure><p>  以上代码最后输出的是：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Observable.array1: 1</span><br><span class="line">Observable.array1: 2</span><br><span class="line">Observable.array1: 3</span><br><span class="line">Observable.array2: [I@4563e9ab</span><br></pre></td></tr></table></figure><h2 id="repeat、repeatWhen"><a href="#repeat、repeatWhen" class="headerlink" title="repeat、repeatWhen"></a>repeat、repeatWhen</h2><ul><li><p><code>repeat</code> 不是创建一个 Observable，而是重复发射原始 Observable 的数据序列。</p></li><li><p><code>repeatWhen</code> 不是缓存和重放原始 Observable 的数据序列，而是有条件地重新订阅和发射原来的 Observable。</p></li></ul><h2 id="retry、retryWhen"><a href="#retry、retryWhen" class="headerlink" title="retry、retryWhen"></a>retry、retryWhen</h2><ul><li><code>retryWhen</code> 将 <code>onError</code> 中的 <code>Throwable</code> 传递给一个函数，这个函数产生另一个Observable，<code>retryWhen</code> 观察它的结果再决定是不是要重新订阅原始的 Observable。如果这个 Observable 发射了一项数据，它就重新订阅，如果这个 Observable 发射的是<code>onError</code> 通知，它就将这个通知传递给观察者然后终止。</li></ul><h2 id="map、flatMap"><a href="#map、flatMap" class="headerlink" title="map、flatMap"></a>map、flatMap</h2><ul><li>当要转换的数据源是 observable 类型的，则只能用 <code>flatmap</code>，而不能用 <code>map</code></li></ul><h1 id="补充学习"><a href="#补充学习" class="headerlink" title="补充学习"></a>补充学习</h1><h2 id="CompositeDisposable"><a href="#CompositeDisposable" class="headerlink" title="CompositeDisposable"></a>CompositeDisposable</h2><p>RxJava 容易造成内存泄漏，在某些情况下没有及时取消订阅导致内存泄漏。CompositeDisposable 可以将 Disposable 统一管理。每当我们得到一个 Disposable 时，就调用 CompositeDisposable.add() 将它添加到容器中, 在退出的时候, 调用 CompositeDisposable.clear() 即可快速解除。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">CompositeDisposable</span> <span class="variable">disposables</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompositeDisposable</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// adding an Observable to the disposable</span></span><br><span class="line">disposables.add(sampleObservable()</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribeWith(<span class="keyword">new</span> <span class="title class_">DisposableObserver</span>&lt;String&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onComplete</span><span class="params">()</span> &#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNext</span><span class="params">(String value)</span> &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Observable&lt;String&gt; <span class="title function_">sampleObservable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.defer(<span class="keyword">new</span> <span class="title class_">Callable</span>&lt;ObservableSource&lt;? <span class="keyword">extends</span> <span class="title class_">String</span>&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ObservableSource&lt;? <span class="keyword">extends</span> <span class="title class_">String</span>&gt; call() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">// Do some long running operation</span></span><br><span class="line">                SystemClock.sleep(<span class="number">2000</span>);</span><br><span class="line">                <span class="keyword">return</span> Observable.just(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>, <span class="string">&quot;five&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;                </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Using clear will clear all, but can accept new disposable</span></span><br><span class="line">disposables.clear(); </span><br><span class="line"><span class="comment">// Using dispose will clear all and set isDisposed = true, so it will not accept any new disposable</span></span><br><span class="line">disposables.dispose(); </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> RxJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlab 镜像工程</title>
      <link href="/2018/06/22/gitlab-mirror/"/>
      <url>/2018/06/22/gitlab-mirror/</url>
      
        <content type="html"><![CDATA[<p>有时候需要在两个 gitlab 服务器之间做镜像文件，这样，在一个服务器上的更改可以同步到另一个服务器上。<br>假设有两个服务器，A 服务器和 B 服务器：</p><ul><li>pull 镜像：在 B 上开发的工程，在 A 上做此工程的 pull 镜像，每次 B 的这个工程有更新，A 会自动 pull 过来。<br>步骤：</li><li>push 镜像：在 A 上开发的工程，做 push 镜像到 B 上，每次 A 的这个工程有更新，A 会自动 push 到 B 上。操作步骤如下：<ul><li>在 B 上创建一个用户，例如 autopush</li><li>如果 B 上还没有对应工程，创建一个对应工程，将 autopush 用户添加到该工程中。然后复制该工程的 http 地址。</li><li>在 A 上进入工程的 Repository 配置 push 镜像<br><img src="/img/2018-06-22-gitlab-mirror/1.png" alt="1"></li><li>将 B 上的工程地址和 autopush 用户组合起来，例如，<a href="http://autopush:password@github.com/annie/demo.git">http://autopush:password@github.com/annie/demo.git</a><br><img src="/img/2018-06-22-gitlab-mirror/2.png" alt="2"></li><li>如果 B 上这个工程是在某个 group 下，则这个 group 的成员都有对此工程的访问权限，此时需要在此工程的 Member 下把 group 中的每个成员添加为 reporter，因为 B 上这个工程为镜像工程，不能允许有人在镜像工程进行 push 操作。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Mac 上安装 Git</title>
      <link href="/2018/06/21/install-git/"/>
      <url>/2018/06/21/install-git/</url>
      
        <content type="html"><![CDATA[<p>有两种方式在 Mac 上安装 Git：</p><ul><li>安装 homebrew，然后通过 homebrew 安装 Git，具体方法请参考 homebrew 的文档：<a href="http://brew.sh/%E3%80%82">http://brew.sh/。</a></li><li>直接从 AppStore 安装 Xcode，Xcode 集成了 Git，不过默认没有安装，你需要运行 Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。</li></ul><p>安装完 Git 其实还没有 <code>.ssh</code> 目录的，要执行生成密钥对的命令以后才会自动生成 <code>.ssh</code> 目录，并且新生成的密钥对都在 <code>.ssh</code> 目录下了。</p><p>要修改密钥的读写权限，否则无法使用 Git。执行以下命令修改权限：<br><code>chmod 644 ~/.ssh/authorized_keys</code><br>如果出现 <code>Permissions 0644 for ‘/root/.ssh/id_rsa’ are too open. </code>等错误显示了，只要把权限降到 <code>0600</code> 就ok了。<br><code>chmod 0600 /root/.ssh/id_rsa</code><br>然后就可以密钥登录了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macbook</title>
      <link href="/2018/06/21/macbook/"/>
      <url>/2018/06/21/macbook/</url>
      
        <content type="html"><![CDATA[<p>Mac 和 Windows 的使用确实差很多，一段时间没用 mac，以我这堪比金鱼的记忆，就会忘记怎么用的。</p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="日常使用类"><a href="#日常使用类" class="headerlink" title="日常使用类"></a>日常使用类</h2><ul><li>Alfred：command+空格键，可以搜索电脑中所有程序。</li><li>Manico：option+数字键，切换应用</li></ul><h2 id="开发类"><a href="#开发类" class="headerlink" title="开发类"></a>开发类</h2><h1 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h1><ul><li>同一个应用多个窗口间相互切换的快捷键：Command+~ </li><li>在QQ展示面板范围内，快捷键ஐcommand+N，将弹出第二个QQ登陆面板框，输入不同的账号和密码实现第二个QQ登陆。</li><li>全屏幕截图：Command + shift + 3</li><li>自定地区屏幕截图：Command + shift + 4</li><li>快速到桌面：拇指和另外三个手指分开（拇指和另外三个手指合并就又回到显示桌面之前的窗口）</li><li>强制结束应用程序：Command + option + esc，相当于 windows 的 control + alt + delete</li><li>桌面切换：先使用Mission Control(三至四只手指向上推)，到右上角开设多一个视窗，再将你需要的视窗拖移到另一个桌面内(拖移需要在Mission Control的界面中进行)，再用三至四只手指向左右滑动来切换桌面。</li><li>Mac OS X系统图形表示方法：<ul><li>⇧ &#x3D; shift</li><li>⌃ &#x3D; control</li><li>⌥ &#x3D; option &#x2F; alt </li><li>Home&#x3D;fn + ◄ </li><li>End&#x3D;fn + ► </li><li>Page Up&#x3D;fn + ▲ </li><li>Page Down&#x3D;fn + ▼</li></ul></li><li>删除后一个字符：fn + delete </li><li>开启 Trackpad 三指拖动窗口特性：System Preferences（系统偏好设置） -&gt; Accessibility （辅助功能）-&gt; Mouse &amp; Trackpad（鼠标&amp;触控板） -&gt; Trackpad Options （触控板选项）-&gt; Enable dragging（启用拖移） -&gt; Three Finger Drag（三指拖移）</li><li>前往文件夹：打开 finder，command + shift + g，输入 &#x2F;etc&#x2F;hosts，点击“前往”即可直接定位到 hosts 文件。<br><img src="/img/2018-06-21-macbook/etc-hosts.png" alt="etc-hosts"><br>若提示没有权限修改 hosts 文件，可右击 hosts 文件，在“显示简介”里面修改 hosts 文件的读写权限</li><li>切换输入法：ctrl + 空格</li><li>mac 访问共享文件夹：打开 Finder 窗口以后，按键盘上的 command+K 组合键，然后在框框中输入要访问的 Windows 共享地址，格式以 SMB:&#x2F;&#x2F; 打头，后面跟要访问的 IP 地址。比如访问 financeserver，则输入 smb:&#x2F;&#x2F;172.22.2.110。<br><img src="/img/2018-06-21-macbook/financeserver.png" alt="financeserver"></li><li>在当前目录打开终端：Finder -&gt; 服务 -&gt; 服务偏好设置，选中“新建位于文件夹的终端窗口”<br><img src="/img/2018-06-21-macbook/open-terminal.png" alt="open-terminal"></li><li>打开当前终端命令行所在的目录文件夹：在终端执行 <code>open .</code>，例如，在终端执行以下命令就可以打开“文稿”文件夹<br><code>cd ~/Documents</code><br><code>open .</code></li><li>让标题栏上直接显示出目录的完整路径，执行以下命令：<br><code>defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES</code><br><code>killall Finder</code><br>再打开 Finder 浏览的时候，会发现完整路径已经出现在标题栏上了，文件的准确位置就一目了然了。</li><li>在 mac 上安装 git：参见此<a href="/2018/06/21/install-git">文章</a></li><li>显示隐藏文件：进入要查看隐藏文件的目录，按 “shift+cmmand+.” 即可显示隐藏文件，再按一下 “shift+cmmand+.” 可恢复文件的隐藏状态。</li><li>剪切文件：在 Mac 上没有直接的“剪切”文件的选项，其实，苹果将类似的功能称为“移动”，可以借助 3 种方式来实现：<ul><li>配合 option 键：在要剪切的项目上右键单击，选择“拷贝”选项，转到需要粘贴的目录，右键单击，此时按住 option 键，会发现菜单中的“粘贴到此处”项变成了“移动到此处”。</li><li>使用组合键：选中目标文件，然后使用 Command+C 复制，然后用 command+Option+V 将其移动到目标目录。</li><li>使用 XtraFinder 将“剪切”菜单添加到右击菜单里。</li></ul></li><li>打开目录，同时按下 shift+command+&gt; 就可以显示出来本目录下的隐藏文件夹了</li></ul><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><ol><li>Mac上安装软件出现“XXXX”已损坏，打不开，应该将它移到废纸篓</li></ol><p>修改系统配置：系统偏好设置 -&gt; 安全性与隐私。修改为任何来源<br>如果没有这个选项的话说明系统已更新到了 （macOS Sierra 10.12 以上的了）<br>需要用终端处理：<br>打开终端，执行 <code>sudo spctl --master-disable</code> 即可。<br>此时重新打开：系统偏好设置 -&gt; 安全性与隐私，会发现多了一个“任何来源”<br><img src="/img/2018-06-21-macbook/master-disable.png" alt="master-disable"></p>]]></content>
      
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坚持</title>
      <link href="/2018/06/21/I-am-back/"/>
      <url>/2018/06/21/I-am-back/</url>
      
        <content type="html"><![CDATA[<p>最近也是受到一些事情的影响，感觉需要振作起来，全方面地改造自己了。</p><p>从现在开始积累自己学习的一点一滴，让以后的自己可以有更多选择的机会。</p><p>坚持很重要！</p><p>很久没更新博客了，今天上来提交博客，果然也是遇到了问题：</p><p><img src="/img/2018-06-21-I-am-back/host-key-verification-failed.png" alt="1"></p><p>现在 github 上添加了公钥（难道我之前没添加过？）：</p><p><img src="/img/2018-06-21-I-am-back/ssh-key.png" alt="1"></p><p>再测试是否可以连接到 github 上，<br>$ ssh <a href="mailto:&#103;&#105;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#x6d;">&#103;&#105;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#x6d;</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> programmer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Import-from-Another-YouTrack-Server</title>
      <link href="/2015/03/24/Import-from-Another-YouTrack-Server/"/>
      <url>/2015/03/24/Import-from-Another-YouTrack-Server/</url>
      
        <content type="html"><![CDATA[<p>被 youtrack 虐过几次，对它有一点不怀好感。。。其实主要了解了它的数据库以后也就好多了，安装的时候一定要先把数据库位置安排好了，便于日后维护。如果忘记数据库在哪里了，那也可以在这个地方找到：c:\ProgramData\JetBrains\YouTrack\conf\internal\wizard-configured.properties<br>（参见：<a href="http://confluence.jetbrains.com/display/YTD6/Changing+Database+Location%EF%BC%89">http://confluence.jetbrains.com/display/YTD6/Changing+Database+Location）</a></p><p>今天是因为要转移 youtrack 了，所以在网上查了一下怎么把一台机器上的 youtrack 数据导入到另一台上。（参见 <a href="https://confluence.jetbrains.com/display/YTD6/Import+from+Another+YouTrack+Server">Import from Another YouTrack Server - YouTrack 6.x Documentation - Confluence</a>）</p><p>To import all issues in a project from one YouTrack server to another:</p><ol><li>Download the latest version of <a href="https://github.com/JetBrains/youtrack-rest-python-library/">YouTrack’s Python Client Library</a> and unzip it.</li><li>Ensure that either <a href="https://www.python.org/downloads/">Python</a> is installed in your system.</li><li>Execute the following command:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python youtrack2youtrack.py source_url source_login source_password target_url target_login target_password projectId</span><br></pre></td></tr></table></figure><p>The following command-line parameters should be provided:</p><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td>source_url</td><td>An URL to a source YouTrack server you want to import issues from.</td></tr><tr><td>source_login</td><td>Username to log in to a source YouTrack server.</td></tr><tr><td>source_password</td><td>Password to log in to the source YouTrack server.</td></tr><tr><td>target_url</td><td>An URL to a target YouTrack server you want to import issues to.</td></tr><tr><td>target_login</td><td>Username to log into the target YouTrack server.</td></tr><tr><td>target_password</td><td>Password to log in to the target YouTrack server.</td></tr><tr><td>projectId</td><td>projectID of a project you want to import to the target YouTrack server.</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> youtrack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 误操作以后的步骤</title>
      <link href="/2015/03/12/have-a-git-mess-on-your-hands/"/>
      <url>/2015/03/12/have-a-git-mess-on-your-hands/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/2015-03-12-have-a-git-mess-on-your-hands/1.jpg" alt="1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mirror-site</title>
      <link href="/2015/03/02/mirror-site/"/>
      <url>/2015/03/02/mirror-site/</url>
      
        <content type="html"><![CDATA[<p>一直有打算好好学学 powershell，可是总是到要写的时候临时抱佛脚。前段时间也是因为要写自动生成镜像的脚本，又临时抱佛脚了一下。虽然可能写得不是很优雅完美，但是这些代码还涉及到挺多方面的。所以干脆贴上来，供以后参考。当然，以后还是要系统的学一下 powershell。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br></pre></td><td class="code"><pre><span class="line">#region Variable 定义各种方法</span><br><span class="line">function Clone($uri) &#123;</span><br><span class="line">    git.exe clone $uri</span><br><span class="line">    return $LASTEXITCODE -eq 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function CheckOut($commitHash)&#123;</span><br><span class="line">    git.exe checkout $commitHash</span><br><span class="line">    return $LASTEXITCODE -eq 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function GetDirectoryName($uri) &#123;</span><br><span class="line">    if ($uri -cmatch &#x27;[^:/](?&lt;USER_NAME&gt;[\w-]+)/(?&lt;REPO_NAME&gt;[\w-]+)(?:\.git)?/?$&#x27;) &#123;</span><br><span class="line">        return $Matches.REPO_NAME</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return $null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function ExtractZip($zipfilename, $destination)&#123;</span><br><span class="line">    if(!(Test-Path $destination))&#123;</span><br><span class="line">        mkdir $destination | Out-Null</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(Test-Path $zipfilename)</span><br><span class="line">    &#123;   </span><br><span class="line">        $shellApplication = New-Object -ComObject Shell.Application</span><br><span class="line">        $zipPackage = $shellApplication.NameSpace($zipfilename)</span><br><span class="line">        $destinationFolder = $shellApplication.NameSpace($destination)</span><br><span class="line">        $destinationFolder.CopyHere($zipPackage.Items()) | Out-Null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;#</span><br><span class="line"># windows 服务相关的方法：停止服务，依赖于 nssm.exe</span><br><span class="line">#&gt;</span><br><span class="line">function StopWindowsService($serviceName)&#123;</span><br><span class="line">    $nssm = &#x27;C:\ServiceTool\nssm.exe&#x27;</span><br><span class="line">    $stopServiceArgs = @(&#x27;stop&#x27;, $serviceName, &#x27;confirm&#x27;)</span><br><span class="line">    &amp; $nssm $stopServiceArgs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;#</span><br><span class="line"># windows 服务相关的方法：启动服务，依赖于 nssm.exe</span><br><span class="line">#&gt;</span><br><span class="line">function StartWindowsService($serviceName)&#123;</span><br><span class="line">    $nssm = &#x27;C:\ServiceTool\nssm.exe&#x27;</span><br><span class="line">    $startServiceArgs = @(&#x27;start&#x27;, $serviceName, &#x27;confirm&#x27;)</span><br><span class="line">    &amp; $nssm $startServiceArgs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;#</span><br><span class="line"># windows 服务相关的方法：删除服务，依赖于 nssm.exe</span><br><span class="line">#&gt;</span><br><span class="line">function RemoveWindowsService($serviceName)&#123;</span><br><span class="line">    $nssm = &#x27;C:\ServiceTool\nssm.exe&#x27;</span><br><span class="line">    $removeServiceArgs = @(&#x27;remove&#x27;, $serviceName, &#x27;confirm&#x27;)</span><br><span class="line">    &amp; $nssm $removeServiceArgs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;#</span><br><span class="line"># windows 服务相关的方法：安装服务，依赖于 nssm.exe</span><br><span class="line">#&gt;</span><br><span class="line">function InstallWindowsService($serviceName, $application, $args)&#123;</span><br><span class="line">    $nssm = &#x27;C:\ServiceTool\nssm.exe&#x27;</span><br><span class="line">    # 不用以下这种方式是因为会弹出创建服务的对话框</span><br><span class="line">    #$installServiceArgs = @(&#x27;install&#x27;, $serviceName, $application, $args)</span><br><span class="line">    #&amp; $nssm $installServiceArgs</span><br><span class="line">    &amp; $nssm &#x27;install&#x27; $serviceName $application $args</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;#</span><br><span class="line"># 将 git 项目 clone 到指定路径下的指定文件夹内</span><br><span class="line"># $gitUrl：要 clone 的项目的 git 地址</span><br><span class="line"># $targetPath：将项目 clone 到此路径下</span><br><span class="line">#&gt;</span><br><span class="line">function CloneProject($gitUrl, $targetPath)&#123;</span><br><span class="line">    Push-Location</span><br><span class="line">    $projectName = GetDirectoryName $gitUrl</span><br><span class="line">    if(Test-Path $targetPath\$projectName)&#123;</span><br><span class="line">        Remove-Item $targetPath\$projectName -Force -Recurse</span><br><span class="line">        &#x27;old cloned project deleted.&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    Set-Location $targetPath</span><br><span class="line">    Clone $gitUrl</span><br><span class="line">    &#x27;new project cloned.&#x27;</span><br><span class="line">    Pop-Location</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;#</span><br><span class="line"># 将指定项目复制到指定路径下</span><br><span class="line"># $srcPath：要复制的项目的源路径</span><br><span class="line"># $destPath：要复制的项目的目标路径</span><br><span class="line"># $projectName：要复制的项目名称</span><br><span class="line">#&gt;</span><br><span class="line">function CopyProject($srcPath, $destPath)&#123;    </span><br><span class="line">    if(Test-Path $destPath)&#123;</span><br><span class="line">        Remove-Item $destPath -Force -Recurse</span><br><span class="line">        &#x27;old project deleted.&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    Copy-Item $srcPath -Recurse $destPath</span><br><span class="line">    &#x27;new project copied.&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;#</span><br><span class="line"># 获取指定路径下的指定类型文件列表</span><br><span class="line"># $path：要获取文件所在的路径</span><br><span class="line"># $fileType：要获取的文件的类型</span><br><span class="line">#&gt;</span><br><span class="line">function GetFileList($path, $fileType) &#123;</span><br><span class="line">    return Get-ChildItem -LiteralPath $path -Recurse -Include  $fileType | %&#123;$_.FullName&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;#</span><br><span class="line"># 将指定内容里的耗时的 js 引用替换掉</span><br><span class="line"># $content：要进行替换的文件内容</span><br><span class="line">#&gt;</span><br><span class="line">function ReplaceJs($content)&#123;</span><br><span class="line">    $newContent = $content -creplace &#x27;ga\.src(\s)*=(\s)*(.*)(google-analytics\.com)(.*)/ga\.js&#x27;&#x27;;&#x27;,&#x27;ga.src = &#x27;&#x27;http://localhost/not-exist/ga.js&#x27;&#x27;&#x27;</span><br><span class="line">    $newContent = $newContent -creplace &#x27;ajax\.googleapis\.com/ajax/libs/angularjs&#x27;, &#x27;www.cdnjs.net/ajax/libs/angular.js&#x27;</span><br><span class="line">    $newContent = $newContent -creplace &#x27;ajax\.googleapis\.com/ajax/libs/jquery&#x27;, &#x27;www.cdnjs.net/ajax/libs/jquery&#x27;</span><br><span class="line">    $newContent = $newContent -creplace &#x27;netdna\.bootstrapcdn\.com/bootstrap&#x27;, &#x27;www.cdnjs.net/ajax/libs/twitter-bootstrap&#x27;</span><br><span class="line">    $newContent = $newContent -creplace &#x27;cdnjs\.cloudflare\.com/ajax/libs/Cookies\.js&#x27;, &#x27;cdn.staticfile.org/Cookies.js&#x27;</span><br><span class="line">    $newContent = $newContent -creplace &#x27;\w*\.google-analytics\.com&#x27;, &#x27;localhost/not-exist&#x27;</span><br><span class="line">    $newContent = $newContent -creplace &#x27;platform\.twitter\.com&#x27;, &#x27;localhost/not-exist&#x27;</span><br><span class="line">    $newContent = $newContent -creplace &#x27;connect\.facebook\.net&#x27;, &#x27;localhost/not-exist&#x27;</span><br><span class="line">    $newContent = $newContent -creplace &#x27;apis\.google\.com/js/platform.js&#x27;, &#x27;localhost/not-exist/platform.js&#x27;</span><br><span class="line">    $newContent = $newContent -creplace &#x27;cdnjs\.cloudflare\.com/ajax/libs/codemirror&#x27;, &#x27;www.cdnjs.net/ajax/libs/codemirror&#x27;</span><br><span class="line">    $newContent = $newContent -creplace &#x27;fonts\.googleapis\.com&#x27;, &#x27;fonts.useso.com&#x27;</span><br><span class="line">    return $newContent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;#</span><br><span class="line"># 遍历文件列表，将每个文件里面的耗时 js 引用替换掉</span><br><span class="line"># $fileList：要进行替换的文件列表</span><br><span class="line"># $encoding：指定文件进行读写使用的编码</span><br><span class="line">#&gt;</span><br><span class="line">function Replace($fileList, $encoding)&#123;</span><br><span class="line">    Foreach($file in $fileList)</span><br><span class="line">    &#123; </span><br><span class="line">        # 不用 Get-Content/Set-Content，是因为它们只支持指定的几种通用的编码。</span><br><span class="line">        $fileContent = [System.IO.File]::ReadAllText($file, $encoding)</span><br><span class="line">        $newContent = ReplaceJs $fileContent</span><br><span class="line">        [System.IO.File]::WriteAllText($file, $newContent, $encoding)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;#</span><br><span class="line"># 生成 clone 后只需复制到服务器上即可的网站</span><br><span class="line"># $gitUrl：API 文档的源码地址</span><br><span class="line"># $cloneFolder：将 API 文档的源码 clone 到此文件夹下</span><br><span class="line"># $serverFolder：API 文档在服务器上的文件夹</span><br><span class="line"># $encoding：读写 API 文档源码的编码</span><br><span class="line">#&gt;</span><br><span class="line">function GenerateWebsite($gitUrl, $cloneFolder, $serverFolder, $encoding)&#123;</span><br><span class="line">    if(!(Test-Path $cloneFolder))&#123;</span><br><span class="line">        mkdir $cloneFolder | Out-Null</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(!(Test-Path $serverFolder))&#123;</span><br><span class="line">        mkdir $serverFolder | Out-Null</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 从 git 地址中获取项目名称</span><br><span class="line">    $projectName = GetDirectoryName $gitUrl</span><br><span class="line"></span><br><span class="line">    # 克隆项目</span><br><span class="line">    CloneProject $gitUrl $cloneFolder</span><br><span class="line"></span><br><span class="line">    # 更新服务器上的项目</span><br><span class="line">    CopyProject $cloneFolder\$projectName $serverFolder\$projectName </span><br><span class="line"></span><br><span class="line">    # 获取该项目指定类型的文件列表</span><br><span class="line">    $fileList = GetFileList $serverFolder\$projectName &#x27;*.html&#x27; </span><br><span class="line"></span><br><span class="line">    # 遍历文件列表，替换耗时 js</span><br><span class="line">    Replace $fileList $encoding</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;#</span><br><span class="line"># 生成 clone 后用 Jekyll 编译后再复制到服务器上的网站</span><br><span class="line"># $gitUrl：API 文档的源码地址</span><br><span class="line"># $cloneFolder：将 API 文档的源码 clone 到此文件夹下</span><br><span class="line"># $serverFolder：API 文档在服务器上的文件夹</span><br><span class="line"># $encoding：读写 API 文档源码的编码</span><br><span class="line">#&gt;</span><br><span class="line">function GenerateIonicWebsite($gitUrl, $cloneFolder, $serverFolder, $encoding)&#123;</span><br><span class="line">    if(!(Test-Path $cloneFolder))&#123;</span><br><span class="line">        mkdir $cloneFolder | Out-Null</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(!(Test-Path $serverFolder))&#123;</span><br><span class="line">        mkdir $serverFolder | Out-Null</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 从 git 地址中获取项目名称</span><br><span class="line">    $projectName = GetDirectoryName $gitUrl</span><br><span class="line"></span><br><span class="line">    # 克隆项目</span><br><span class="line">    CloneProject $gitUrl $cloneFolder</span><br><span class="line"></span><br><span class="line">    # 生成静态网站</span><br><span class="line">    Push-Location</span><br><span class="line">    Set-Location $cloneFolder\$projectName</span><br><span class="line">    jekyll build</span><br><span class="line">    Pop-Location</span><br><span class="line"></span><br><span class="line">    # 更新服务器上的项目</span><br><span class="line">    CopyProject $cloneFolder\$projectName\&#x27;_site&#x27; $serverFolder\$projectName</span><br><span class="line"></span><br><span class="line">    # 获取该项目指定类型的文件列表</span><br><span class="line">    $fileList = GetFileList $serverFolder\$projectName &#x27;*.html&#x27; </span><br><span class="line"></span><br><span class="line">    # 遍历文件列表，替换耗时 js</span><br><span class="line">    Replace $fileList $encoding</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;#</span><br><span class="line"># jslint-error-explanations 的网站已经不再开源，所以将最后开源的内容生成网站拷贝到服务器上即可（只需做一次）</span><br><span class="line"># $gitUrl：API 文档的源码地址</span><br><span class="line"># $cloneFolder：将 API 文档的源码 clone 到此文件夹下</span><br><span class="line"># $serverFolder：API 文档在服务器上的文件夹</span><br><span class="line"># $encoding：读写 API 文档源码的编码</span><br><span class="line">#&gt;</span><br><span class="line">function GenerateJslintWebsite($gitUrl, $cloneFolder, $serverFolder, $encoding)&#123;</span><br><span class="line">    if(!(Test-Path $cloneFolder))&#123;</span><br><span class="line">        mkdir $cloneFolder | Out-Null</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(!(Test-Path $serverFolder))&#123;</span><br><span class="line">        mkdir $serverFolder | Out-Null</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 从 git 地址中获取项目名称</span><br><span class="line">    $projectName = GetDirectoryName $gitUrl</span><br><span class="line"></span><br><span class="line">    # 克隆项目（已不再开源，clone 后要切换到“Remove Jekyll site”之前的那个提交）</span><br><span class="line">    CloneProject $gitUrl $cloneFolder    </span><br><span class="line"></span><br><span class="line">    # 生成静态网站，所以将最后开源的内容生成网站拷贝到服务器上即可</span><br><span class="line">    Push-Location</span><br><span class="line">    Set-Location $cloneFolder\$projectName</span><br><span class="line">    CheckOut &#x27;d7a70009bf2eac2b01675efa160028d0e4205e89&#x27;</span><br><span class="line">    jekyll build</span><br><span class="line">    Pop-Location</span><br><span class="line"></span><br><span class="line">    # 更新服务器上的项目</span><br><span class="line">    CopyProject $cloneFolder\$projectName\&#x27;_site&#x27; $serverFolder\$projectName</span><br><span class="line"></span><br><span class="line">    # 获取该项目指定类型的文件列表</span><br><span class="line">    $fileList = GetFileList $serverFolder\$projectName &#x27;*.html&#x27; </span><br><span class="line"></span><br><span class="line">    # 遍历文件列表，替换耗时 js</span><br><span class="line">    Replace $fileList $encoding</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;#</span><br><span class="line"># 生成 html2jade 的网站</span><br><span class="line"># $gitUrl：网站源码地址</span><br><span class="line"># $serverFolder：网站源码在服务器上的文件夹</span><br><span class="line"># $encoding：读写网站源码的编码</span><br><span class="line">#&gt;</span><br><span class="line">function GenerateHtml2jadeWebsite($gitUrl, $serverFolder, $encoding)&#123;</span><br><span class="line">    if(!(Test-Path $serverFolder))&#123;</span><br><span class="line">        mkdir $serverFolder | Out-Null</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 从 git 地址中获取项目名称</span><br><span class="line">    $projectName = GetDirectoryName $gitUrl</span><br><span class="line"></span><br><span class="line">    # 暂停服务</span><br><span class="line">    StopWindowsService $projectName    </span><br><span class="line"></span><br><span class="line">    # 克隆项目</span><br><span class="line">    CloneProject $gitUrl $serverFolder</span><br><span class="line"></span><br><span class="line">    # npm 安装</span><br><span class="line">    Push-Location</span><br><span class="line">    Set-Location $serverFolder\$projectName</span><br><span class="line">    npm install</span><br><span class="line">    Pop-Location</span><br><span class="line"></span><br><span class="line">    # 获取该项目指定类型的文件列表</span><br><span class="line">    $fileList = GetFileList $serverFolder\$projectName &#x27;*.html&#x27; </span><br><span class="line"></span><br><span class="line">    # 遍历文件列表，替换耗时 js</span><br><span class="line">    Replace $fileList $encoding</span><br><span class="line"></span><br><span class="line">    # 将 web.js 里的端口改成 8003</span><br><span class="line">    $webJs = Get-ChildItem -LiteralPath $serverFolder\$projectName\&#x27;web.js&#x27; | %&#123;$_.FullName&#125;</span><br><span class="line">    $fileContent = [System.IO.File]::ReadAllText($webJs, $encoding)</span><br><span class="line">    $newContent = $fileContent -creplace &#x27;9999&#x27;, &#x27;8003&#x27;</span><br><span class="line">    [System.IO.File]::WriteAllText($webJs, $newContent, $encoding)</span><br><span class="line"></span><br><span class="line">    # 启动服务</span><br><span class="line">    StartWindowsService $projectName  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;#</span><br><span class="line"># 生成 extjs 的 API 文档网站</span><br><span class="line"># $docUrl：API 文档网站源码的下载地址</span><br><span class="line"># $serverFolder：API 文档网站在服务器上的文件夹</span><br><span class="line"># $encoding：读写网站源码的编码</span><br><span class="line">#&gt;</span><br><span class="line">function GenerateExtjsWebsite($docUrl, $cloneFolder, $serverFolder, $encoding)&#123;</span><br><span class="line">    if(!(Test-Path $cloneFolder))&#123;</span><br><span class="line">        mkdir $cloneFolder | Out-Null</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(!(Test-Path $serverFolder))&#123;</span><br><span class="line">        mkdir $serverFolder | Out-Null</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 获取文件名</span><br><span class="line">    $projectName = &#x27;extjs&#x27;</span><br><span class="line">    if ($docUrl -cmatch &#x27;(?m)http://cdn\.sencha\.com/downloads/docs/(?&lt;FILE_NAME&gt;ext-docs-\w+\.\w+\.\w+)\.zip&#x27;) &#123;</span><br><span class="line">        $docZipFullName = $Matches.FILE_NAME+&#x27;.zip&#x27;</span><br><span class="line">        $docZipBaseName = $Matches.FILE_NAME</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 下载 API 文档网站源码</span><br><span class="line">    if(!(Test-Path $cloneFolder\$docZipFullName)) &#123;</span><br><span class="line">        $dl = New-Object System.Net.WebClient</span><br><span class="line">        $targetPath = $cloneFolder, $docZipFullName -join &#x27;\&#x27;</span><br><span class="line">        $dl.DownloadFile($docUrl, $targetPath)</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    if(Test-Path $cloneFolder\$projectName)&#123;</span><br><span class="line">        Remove-Item $cloneFolder\$projectName -Force -Recurse</span><br><span class="line">    &#125;</span><br><span class="line">    # 解压</span><br><span class="line">    ExtractZip $cloneFolder\$docZipFullName $cloneFolder\$projectName</span><br><span class="line"></span><br><span class="line">    # 更新服务器上的项目（因为解压出来还有一层文件夹，所以是将这一层文件夹里面的东西拷到服务器上）</span><br><span class="line">    $file = Get-ChildItem -LiteralPath $cloneFolder\$projectName | %&#123;$_.BaseName&#125;</span><br><span class="line">    CopyProject $cloneFolder\$projectName\$file $serverFolder\$projectName</span><br><span class="line"></span><br><span class="line">    # 获取该项目指定类型的文件列表</span><br><span class="line">    $fileList = GetFileList $serverFolder\$projectName &#x27;*.html&#x27; </span><br><span class="line"></span><br><span class="line">    # 遍历文件列表，替换耗时 js</span><br><span class="line">    Replace $fileList $encoding</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#endregion</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#region Variable 开始生成各个镜像站点</span><br><span class="line"></span><br><span class="line"># 定义一些通用的变量</span><br><span class="line">$currentPath = Split-Path -Parent $MyInvocation.MyCommand.Definition</span><br><span class="line">$cloneFolder = $currentPath, &#x27;clone&#x27; -join &#x27;\&#x27;</span><br><span class="line">$serverFolder = $currentPath, &#x27;server&#x27; -join &#x27;\&#x27;</span><br><span class="line">$encoding = [System.Text.Encoding]::GetEncoding(&#x27;iso-8859-1&#x27;)</span><br><span class="line"></span><br><span class="line">if(!(Test-Path $cloneFolder))&#123;</span><br><span class="line">   mkdir $cloneFolder | Out-Null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(!(Test-Path $serverFolder))&#123;</span><br><span class="line">   mkdir $serverFolder | Out-Null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#region Variable 生成 AngularJs 的 API 文档</span><br><span class="line">#$angularGit = &#x27;git@github.com:angular-cn/ng-docs-en.git&#x27;</span><br><span class="line">$angularGit = &#x27;https://github.com/angular-cn/ng-docs-en.git&#x27;</span><br><span class="line">GenerateWebsite $angularGit $cloneFolder $serverFolder $encoding</span><br><span class="line">#endregion</span><br><span class="line"></span><br><span class="line">#region Variable 生成 ionic 的 API 文档</span><br><span class="line">#$ionicGit = &#x27;git@github.com:driftyco/ionic-site.git&#x27;</span><br><span class="line">$ionicGit = &#x27;https://github.com/driftyco/ionic-site.git&#x27;</span><br><span class="line">GenerateIonicWebsite $ionicGit $cloneFolder $serverFolder $encoding</span><br><span class="line">#endregion</span><br><span class="line"></span><br><span class="line">#region Variable 生成 JSLint ErrorExplanations 的文档</span><br><span class="line">#$jsLintGit = &#x27;git@github.com:jamesallardice/jslint-error-explanations.git&#x27;</span><br><span class="line">$jsLintGit = &#x27;https://github.com/jamesallardice/jslint-error-explanations.git&#x27;</span><br><span class="line">GenerateJslintWebsite $jsLintGit $cloneFolder $serverFolder $encoding</span><br><span class="line">#endregion</span><br><span class="line"></span><br><span class="line">#region Variable 生成 html2jade 网站</span><br><span class="line">#$html2jadeGit = &#x27;git@github.com:aaronpowell/html2jade-website.git&#x27;</span><br><span class="line">$html2jadeGit = &#x27;https://github.com/aaronpowell/html2jade-website.git&#x27;</span><br><span class="line">GenerateHtml2jadeWebsite $html2jadeGit $serverFolder $encoding</span><br><span class="line">#endregion</span><br><span class="line"></span><br><span class="line">#region Variable 生成 extjs 网站</span><br><span class="line">$docUrl = &#x27;http://cdn.sencha.com/downloads/docs/ext-docs-5.1.0.zip&#x27;</span><br><span class="line">GenerateExtjsWebsite $docUrl $cloneFolder\&#x27;extjs&#x27; $serverFolder $encoding</span><br><span class="line">#endregion</span><br><span class="line"></span><br><span class="line">#endregion</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> powershell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ERROR Deployer not found: github</title>
      <link href="/2015/02/14/ERROR-Deployer-not-found-github/"/>
      <url>/2015/02/14/ERROR-Deployer-not-found-github/</url>
      
        <content type="html"><![CDATA[<p>自从搭建了我的博客，2 个多月没再更新。结果今天想要发布博客的时候发现 <code>hexo g</code> 和 <code>hexo d</code> 居然不能用了，提示“ERROR Deployer not found: github”。</p><p>于是上网查了，原来是 hexo 版本升级以后 _config.yml 配置里面不再支持 github，要将 github 改成 git:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:AnnieCyl/anniecyl.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>然后再安装一些新的插件：</p><h3 id="Modify-package-json"><a href="#Modify-package-json" class="headerlink" title="Modify package.json"></a>Modify package.json</h3><p>Add <code>hexo</code> data to <code>package.json</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Clean-cache"><a href="#Clean-cache" class="headerlink" title="Clean cache"></a>Clean cache</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h3 id="Install-generators"><a href="#Install-generators" class="headerlink" title="Install generators"></a>Install generators</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br></pre></td></tr></table></figure><h3 id="Install-server"><a href="#Install-server" class="headerlink" title="Install server"></a>Install server</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure><h3 id="Install-deployers"><a href="#Install-deployers" class="headerlink" title="Install deployers"></a>Install deployers</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br></pre></td></tr></table></figure><h3 id="Update-plugins"><a href="#Update-plugins" class="headerlink" title="Update plugins"></a>Update plugins</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-marked@0.2 --save</span><br><span class="line">npm install hexo-renderer-stylus@0.2 --save</span><br><span class="line">npm install hexo-generator-feed@1 --save</span><br><span class="line">npm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure><p><a href="https://github.com/hexojs/hexo/wiki/Migrating-from-2.x-to-3.0#modify-packagejson">https://github.com/hexojs/hexo/wiki/Migrating-from-2.x-to-3.0#modify-packagejson</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 hexo 搭建博客</title>
      <link href="/2014/12/06/start-using-hexo/"/>
      <url>/2014/12/06/start-using-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h1><ul><li><a href="http://nodejs.org/">nodejs</a></li><li><a href="http://git-scm.com/downloads">git</a></li><li><a href="http://www.syntevo.com/smartgit/">smartgit</a> 这个主要是为了搭建好博客后方便博客源码的管理，比起 git bash 的命令行操作好用。</li></ul><h1 id="注册-github-账号"><a href="#注册-github-账号" class="headerlink" title="注册 github 账号"></a>注册 github 账号</h1><p>在 <a href="https://github.com/">github</a> 上注册一个账号。</p><h1 id="创建-github-库"><a href="#创建-github-库" class="headerlink" title="创建 github 库"></a>创建 github 库</h1><p>在 github 上用你的 github 账号的用户名创建一个 repository，如我的 github 账户的用户名为 AnnieCyl，那么我就要创建一个名为 <strong>anniecyl</strong>.github.io 的 repository，注意：repository 的名字要以 <strong>.github.io</strong> 结尾，且必须与你的 github 账号的用户名一致，否则最后将无法打开你的博客页面。如下：<br><img src="/img/2014-12-06-start-using-hexo/1.png" alt="1"></p><p>默认生成的 repository 只有 master 分支，这个分支我们用来发布我们的博客。我们可以再建一个 develop 分支，这个分支是用来编辑博客的文章，编辑好的博客文章再通过 hexo 发布到 master 分支上。如下：<br><img src="/img/2014-12-06-start-using-hexo/2.png" alt="2"></p><p>将这个 repository 从 github 上 clone 到本地，可以在以下地方看到这个 repository 的地址：<br><img src="/img/2014-12-06-start-using-hexo/3.png" alt="3"></p><p>然后用 git bash 命令行 clone：<code>git clone https://github.com/AnnieCyl/anniecyl.github.io.git</code>，如下：<br><img src="/img/2014-12-06-start-using-hexo/4.png" alt="4"></p><p>或者用 smartgit 的 clone 向导界面操作，如下：<br><img src="/img/2014-12-06-start-using-hexo/5.png" alt="5"></p><h1 id="开始-hexo-吧"><a href="#开始-hexo-吧" class="headerlink" title="开始 hexo 吧"></a>开始 hexo 吧</h1><h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><p>打开 cmd 命令行，执行如下命令（前提是已经安装了 nodejs）：<br><code>npm install -g hexo</code></p><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><p>使用 git bash 或者 smartgit 把前面从 github 上 clone 到本地的 repository 切换到 develop 分支，然后打开本地 repository 文件夹，在此文件夹中用 cmd 命令行依次执行下面的命令：<br><code>hexo init</code><br><code>npm install</code></p><p>到此步你可以在本地查看现在博客搭建成什么样了，运行 <code>hexo server</code>，然后打开 <code>http://localhost:4000/</code> 即可看到。但是此时查看的博客还只是在本地，还未将你的博客发布到 github 上。</p><h2 id="生成-ssh-key"><a href="#生成-ssh-key" class="headerlink" title="生成 ssh key"></a>生成 ssh key</h2><p>现在我们要将本地 repository 与远程的 github 建立联系，我们需要使用 ssh keys。</p><ul><li>如果你的 ~&#x2F;.ssh 目录下已经有名为 id_rsa 的 ssh key 了，且这个 ssh key 还未用在其他 github 账户上，那么你可以直接使用这个 id_rsa，github 默认是在 ~&#x2F;.ssh 目录下查找 id_rsa 的 ssh key。</li><li>如果你的 ~&#x2F;.ssh 目录下的 id_rsa 已经被用在其他 github 账户了，那么你就要再生成另外的 ssh key，并且对 ~&#x2F;.ssh&#x2F;config 文件进行配置来告诉 github 使用新生成的这个 ssh key。方法如下：<br>（1）打开 git bash，cd 到 ~&#x2F;.ssh 目录，然后输入以下命令：<code>ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;</code>，会提示输入 ssh key 的文件名，输入 ssh key 文件名后回车，会提示输入密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。<br>（2）在 config 中添加如下配置：<br>  host github.com<br>      CheckHostIP no<br>      user git<br>      hostname github.com<br>      port 22<br>      identityfile ~&#x2F;.ssh&#x2F;你刚生成的 ssh key 的名称</li></ul><h2 id="添加-ssh-key到-github"><a href="#添加-ssh-key到-github" class="headerlink" title="添加 ssh key到 github"></a>添加 ssh key到 github</h2><p>在本机生成 ssh key 之后，需要添加到 github 上，以完成 ssh 链接的设置。<br>（1）打开 ssh key 文件（id_rsa.pub 或者你新生成的 .pub 文件），拷贝文件内容。<br>（2）打开你的 github 账号，点击右上角的 Settings-&gt; SSH keys —&gt; Add SSH key，将上面拷贝的内容粘贴进去，最后点击下方的“Add key”。<br>可在 git bash 中执行 <code>ssh -T git@github.com</code> 看看设置是否成功。</p><h2 id="修改博客配置"><a href="#修改博客配置" class="headerlink" title="修改博客配置"></a>修改博客配置</h2><p>发布博客之前，需要修改配置，才能够将博客部署到 github 上。打开本地 repository 目录下的 _config.yml，比如我的配置如下：</p><pre><code>    deploy:        type: github        repository: git@github.com:AnnieCyl/anniecyl.github.io.git        branch: master</code></pre><p><code>repository</code> 配置项要使用 ssh 地址，可在 github 上查看你的 repository 的 ssh 地址。</p><h2 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h2><p>在本地 repository 中执行以下命令：<br><code>hexo g</code><br><code>hexo d</code></p><p>ok 啦，接下来你就可以在浏览器中输入：你的 github 用户名.github.io(比如我的博客：anniecyl<br>.github.io)看到你的博客了。</p><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>在本地 repository 中执行以下命令：<br><code>hexo new &quot;my new post&quot;</code><br>会自动在本地 repository 的 <code>source/_posts</code> 下生成 <code>my new post.md</code>，编辑该文件后就可以发布到博客上了。</p><h2 id="修改博客主题"><a href="#修改博客主题" class="headerlink" title="修改博客主题"></a>修改博客主题</h2><p>在 <code>https://hexo.io/themes/</code> 上有很多现有的主题可以直接拿来用。每个主题都有提供使用的方法。其实只需两个步骤：</p><ol><li>将想要用的主题 clone 到你的博客工程的 <code>themes</code> 路径下</li><li>修改 <code>_config.yml</code> 中的 <code>theme</code> 为主题名称</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://hexo.io/docs/">Hexo</a></li><li><a href="http://www.blogjava.net/lishunli/archive/2012/03/08/371556.html">GitHub多账户使用</a></li><li><a href="http://www.cnblogs.com/zhcncn/p/4097881.html">Hexo搭建Github静态博客</a></li><li><a href="http://www.jianshu.com/p/05289a4bc8b2">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
